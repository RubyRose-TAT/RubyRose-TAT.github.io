<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>RubyRose</title>
  
  
  <link href="https://rubyrose-tat.github.io/atom.xml" rel="self"/>
  
  <link href="https://rubyrose-tat.github.io/"/>
  <updated>2023-03-21T15:11:43.072Z</updated>
  <id>https://rubyrose-tat.github.io/</id>
  
  <author>
    <name>RubyRose</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试常见问题</title>
    <link href="https://rubyrose-tat.github.io/2023/03/21/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>https://rubyrose-tat.github.io/2023/03/21/%E9%9D%A2%E8%AF%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</id>
    <published>2023-03-21T10:00:00.000Z</published>
    <updated>2023-03-21T15:11:43.072Z</updated>
    
    <content type="html"><![CDATA[<h4 id="目前拿到了几个offer">目前拿到了几个offer</h4><p>确实，现在我的手上有几个其它公司的offer，也在看其它公司的机会。但是呢，经过今天和您的沟通，以及对公司整体的了解，我对于咱们公司的印象是非常好的，不管是企业文化方面、管理方面，还是公司整体的工作氛围方面，都比较符合我对于理想公司的预期，同时也是非常希望能够得到这次机会。</p><p>现在是我求职的初级阶段，我刚开始找工作，贵公司也是我前期投递的几家公司之一。我比较早投递贵公司，也是因为我对贵公司的整体情况比较认可，也是希望能够加入其中。目前，我手上还没有其他的工作机会，所有我也是比较珍惜我这次面试的机会，并希望能够在面试中展现出自己的能力，同时深入的了解贵公司整体的情况，我希望能够在这次面试中找到非常适合我的工作机会。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;目前拿到了几个offer&quot;&gt;目前拿到了几个offer&lt;/h4&gt;
&lt;p&gt;确实，现在我的手上有几个其它公司的offer，也在看其它公司的机会。但是呢，经过今天和您的沟通，以及对公司整体的了解，我对于咱们公司的印象是非常好的，不管是企业文化方面、管理方面，还是公司整体的</summary>
      
    
    
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>烟草笔试</title>
    <link href="https://rubyrose-tat.github.io/2023/03/21/%E7%83%9F%E8%8D%89%E7%AC%94%E8%AF%95/"/>
    <id>https://rubyrose-tat.github.io/2023/03/21/%E7%83%9F%E8%8D%89%E7%AC%94%E8%AF%95/</id>
    <published>2023-03-20T16:00:00.000Z</published>
    <updated>2023-03-21T16:44:30.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="中烟工业与烟草局的区别">中烟工业与烟草局的区别</h2><h4 id="性质不同">性质不同</h4><p>中国烟草体制实行工商分离体制，即生产和销售分离的形式<br>中烟工业负责生产和运输，是工业企业<br>专卖局负责销售和稽查，是商业企业</p><h4 id="职能不同">职能不同</h4><p>在烟草公司生产产业链中，中烟工业和烟草局处在不同的链接上，分工不同，各司其职<br>中烟工业，主要负责卷烟生产，即烟草生产。但生产好的烟草制品不能直接销售给客户，要先卖给各地的烟草公司。<br>烟草专卖局，也就是烟草局，实行&quot;统一领导，垂直管理，专卖专营&quot;的烟草专卖管理体制。主要履行对国有资产经营、管理、监督;专卖执法、打假打私;负责卷烟营销、烟叶生产经验、物流配送;负责财务、人力资源、薪酬分配管理等职能。烟草专卖局对全行业&quot;人、财、物、产、供、销、内、外、贸&quot;进行统一管理。</p><h4 id="组织体系不同">组织体系不同</h4><p>中烟工业：无市县级工业企业，中烟工业下辖卷烟厂。<br>烟草专卖局：四级体系，分别是：国家烟草局、省烟草局、市烟草局、县烟草局，上级烟草管理下一级烟草局。</p><h4 id="岗位分类不同">岗位分类不同</h4><p>中烟工业招聘岗位主要有三类：生产操作类、专业管理类、专业技术类<br>1.生产操作类，如：操作工、电气维修工、机械维修工、工艺工、仪表维修工等.<br>2.专业管理类，如：档案管理员、新媒体管理员、仓储物流管理员、人力资源管理员、规范管理员、企业管理员、营销数据统计分析员等。<br>3.专业技术类，如：物流技术管理员、系统维护员、质量管理员、烟叶技术员、财务会计、技安管理员、工艺技术员、能源管理员、生产统计分析员、成本核算管理、审计员、信息技术员、基建技术员等等。<br>烟草局招聘岗位，主要包括管理技术类岗位与业务操作类岗位两大类。管理技术类岗位如文秘岗，业务操作类岗位，有卷烟营销、市场管理、烟叶生产等。</p>]]></content>
    
    
    <summary type="html">烟草相关知识</summary>
    
    
    
    <category term="体制内考试" scheme="https://rubyrose-tat.github.io/categories/%E4%BD%93%E5%88%B6%E5%86%85%E8%80%83%E8%AF%95/"/>
    
    
    <category term="考试" scheme="https://rubyrose-tat.github.io/tags/%E8%80%83%E8%AF%95/"/>
    
    <category term="烟草" scheme="https://rubyrose-tat.github.io/tags/%E7%83%9F%E8%8D%89/"/>
    
    <category term="体制内" scheme="https://rubyrose-tat.github.io/tags/%E4%BD%93%E5%88%B6%E5%86%85/"/>
    
  </entry>
  
  <entry>
    <title>vi编辑器</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux-vi%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux-vi%E7%BC%96%E8%BE%91%E5%99%A8/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T15:00:53.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="vi编辑器三种模式">vi编辑器三种模式</h2><h3 id="命令模式-Command-mode">命令模式 (Command mode)</h3><p>通过在键盘上输入相关命令，实现控制屏幕光标的移动，删除字符或行的内容，撤销文本的修改，移动复制文本等功能，以及进入到插入模式或底线模式中。</p><h3 id="插入模式-Insert-mode">插入模式 (Insert mode)</h3><p>只有在插入模式下，才可以进行文本编辑。<br>在插入模式中，任何字符都将被当作文本输入到文件中。</p><h3 id="底线模式-Last-Line-mode">底线模式 (Last Line mode)</h3><p>主要进行一些文字编辑的辅助功能，比如字符串搜索，替换和保存文件等操作。</p><h3 id="三种模式间转换">三种模式间转换</h3><p><img src="https://uploadfiles.nowcoder.com/images/20210419/369118006_1618825411496/25EA65C2A1DB93363CD580B664ABB0CB" alt="转换"></p><hr><p>#编辑一个文件<br>创建新文件，进入vi编辑器 <code>vi name</code><br>查看文件内容 <code>more name</code><br>回退:<code>N</code><br>结束:<code>q</code><br>撤销:<code>u</code><br>返回第一个文件<code>rew</code><br>设置行号: <code>:set nu</code><br>文件不存盘退出<code>:q!(:q)</code><br>文件存盘退出<code>:wq!(:wq)</code><br>文件不存盘退出查看内容，查看文件是否为只读内容文件<code>:ls -l name</code><br>文件存盘退出查看内容，在当前界面确认文件内容是否被修改<code>more name</code></p><hr><h2 id="移动光标">移动光标</h2><p>数字键+方向键 <code>(kjhl)</code><br><code>w</code>向前移动一单词，<code>b</code>向后移动一单词，<code>e</code>移动到本单词末尾<br>移动到行首: <code>^</code><br>移动到行尾: <code>＄</code>  <code>2＄(第二行行尾)</code></p><hr><h2 id="添加文本">添加文本</h2><p>在光标上方插入: <code>O</code><br>在光标下方插入: <code>o</code><br>在行首插入文本: <code>I</code><br>在行末插入文本: <code>A</code></p><hr><h2 id="查找字符串">查找字符串</h2><p>向前查找字符串: /…(N)<br>向后查找字符串: /…(n)</p><hr><h2 id="字符替换">字符替换</h2><p>单个字符替换: <code>r</code><br>逐字符覆盖文本: <code>R</code><br>对单词替换: <code>cw</code><br><strong>替换字符串</strong>: <code>[range]s/s1/s2/ [option]</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[range] 表示检索范围，省略时表示当前行<br><span class="hljs-number">1</span>,<span class="hljs-number">10</span>表示从第<span class="hljs-number">1</span>行到<span class="hljs-number">10</span>行<br>%表示整个文件，同<span class="hljs-number">1</span>,<span class="hljs-variable">$</span><br><span class="hljs-variable"></span> ,<span class="hljs-variable">$从</span>当前行到文件尾<br><br>s 为替换命令<br>s1 要被替换的串，s2 为替换的串<br><br>option 表示选项：<br><span class="hljs-regexp">/g表示在全局文件中进行替换</span><br><span class="hljs-regexp">/c</span>表示在每次替换之前需要用户进行确认<br>省略时仅对每行第一个匹配串进行替换<br></code></pre></td></tr></table></figure><hr><h2 id="文本复制，剪切，粘贴">文本复制，剪切，粘贴</h2><p>复制单词: <code>yl</code><br>复制一行: <code>yy</code><br>粘贴: <code>p</code><br>剪切: <code>x</code><br>复制指定字符: <code>yfy</code> <code>（此处y是所指选择单词January的最后一个字符）</code><br>剪切指定字符: <code>Dfy</code><br>复制单词: <code>yw</code> <code>2yw</code><br>剪切单词: <code>dw</code></p>]]></content>
    
    
    <summary type="html">vi编辑器基本操作</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu基本操作</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T15:10:35.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu关机命令：">Ubuntu关机命令：</h2><h4 id="shutdown">shutdown:</h4><p><strong>sudo shutdown</strong></p><ol><li>-k 并不会关机，只发出警告信息给所以用户</li><li>-r 重新启动系统</li><li>-h 关闭系统</li><li>-c 取消运行shutdown</li></ol><h4 id="halt">halt:</h4><p>相当于 shutdown -h<br><strong>sudo halt</strong></p><ol><li>-w 并不会关机，将关机信息写入到/var/log/wtmp文件中</li><li>-d 关闭系统，不把记录写到/var/log/wtmp日志文件中</li><li>-f 不调用shutdown而强制关闭系统</li></ol><h4 id="reboot">reboot:</h4><p>重启<br><strong>sudo reboot</strong></p><ol><li>-w 并不会真正重启系统，将重启信息写入到/var/log/wtmp文件中</li><li>-d 重启系统，不把记录写到/var/log/wtmp日志文件中</li><li>-f 不调用shutdown而强制重启系统<br> </li></ol><hr><h2 id="命令语法规则：">命令语法规则：</h2><h4 id="命令自动补全：tab">命令自动补全：tab</h4><h4 id="历史命令查看：history">历史命令查看：history</h4><h4 id="命令替换：-命令的参数可由令一个命令的接果来替代">命令替换： 命令的参数可由令一个命令的接果来替代</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">kill</span> <span class="hljs-variable">$</span>(pidof less)  <br><span class="hljs-built_in">kill</span> <span class="hljs-string">&#x27;pidof less&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="命令别名：-alias">命令别名： alias</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alias</span> <span class="hljs-keyword">work</span> = &quot;cd /home/user/program/cplus&quot;<br>unalias <span class="hljs-keyword">work</span><br></code></pre></td></tr></table></figure><p> </p><hr><h2 id="软件安装">软件安装</h2><h4 id="dpkg-Debian-Package">dpkg(Debian Package)</h4><ol><li>-i 安装软件(install)</li><li>-R 安装一个目录下面所有的软件包(Regressive)</li><li>-r 删除软件包，但保存其配置信息(remove)</li><li>-L 查看软件安装文件所在位置(Location)</li></ol><h4 id="apt-Advanced-Packaging-Tool">apt(Advanced Packaging Tool)</h4><ol><li>apt-get install 安装包</li><li>apt-get reinstall 重新安装包</li><li>apt-get -f install 修复安装</li><li>apt-get remove 删除包</li><li>apt-get autoremove 删除包及其依赖</li><li>apt-get upgrade 更新已安装的包</li></ol><h2 id="目录与文件">目录与文件</h2><br/><h3 id="更改工作目录：cd">更改工作目录：cd</h3><ol><li>cd … 转到当前目录的上层目录</li><li>cd ~ 转到当前用户的家目录</li><li>cd …/…/ 转到当前目录的上上层目录</li><li>pwd 显示当前工作目录</li></ol><br/><h3 id="目录与文件查看-ls">目录与文件查看: ls</h3><ol><li>-l 以长格式形式显示</li><li>-a 显示所有文件或目录，包括隐藏文件</li><li>-i 显示文件索引信息，也就是文件的inode号</li><li>-d 列出目录</li></ol><br/><h3 id="创建工作目录-mkdir">创建工作目录: mkdir</h3><ol><li>-m 指定所有用户对新建目录的权限</li><li>-p 可以强制创建多层目录</li></ol><br/><h3 id="创建空文件-touch">创建空文件: touch</h3><br/><h3 id="创建文件并写入内容-cat">创建文件并写入内容: cat</h3><p><code>cat &gt; file</code> 输入内容 ctrl+c</p><p><code>cat file</code> 查看是否创建成功</p><br/><h3 id="向文件中写入内容-echo-hello-world-file">向文件中写入内容: echo hello world &gt; file</h3><br/><h3 id="复制文件或目录-cp">复制文件或目录: cp</h3><p>-r 递归复制</p><p>复制文件file1到/tmp中并重命名尾file2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp file1 <span class="hljs-regexp">/tmp/</span>file2<br></code></pre></td></tr></table></figure><p>复制/root/file1到/tmp中并重命名为file2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/root/</span>file1 <span class="hljs-regexp">/tmp/</span>file2<br></code></pre></td></tr></table></figure><p>复制当前目录下以.bak结尾的文件到/tmp中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>*.bak /tmp<br></code></pre></td></tr></table></figure><br/><h3 id="更改文件或目录名称-mv">更改文件或目录名称: mv</h3><p>将/tmp目录下的pic重命名为pic2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/tmp/</span>pic <span class="hljs-regexp">/tmp/</span>pic2<br></code></pre></td></tr></table></figure><br/><h3 id="目录与文件移动-mv">目录与文件移动: mv</h3><p>将pic目录下的所有以png结尾的文件移动到/usr/local/share/pic下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/tmp/</span>pic<span class="hljs-regexp">/*.png /u</span>sr<span class="hljs-regexp">/local/</span>share/pic<br></code></pre></td></tr></table></figure><br/><h3 id="删除文件或目录-rm">删除文件或目录: rm</h3><ol><li>-r 递归删除，可以删除目录下的文件或目录</li><li>-f 删除文件时不提醒而强制删除</li><li>rmdir 只能删除空目录</li></ol><p>删除文件名中包含字符4且以 .bak结尾的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> *<span class="hljs-number">4</span><span class="hljs-regexp">*.bak</span><br></code></pre></td></tr></table></figure><p>删除当前目录下扩展名有四个字符的文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">rm *.<span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>删除文件首字母为a,b或c，且扩展名为.txt的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> [abc]<span class="hljs-regexp">*.txt</span><br></code></pre></td></tr></table></figure><p>删除文件名为数字字符开头，且文件扩展名为两个字符的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [0-9]*.??<br></code></pre></td></tr></table></figure><br/><h3 id="文件详细信息-stat">文件详细信息: stat</h3><hr><p></p><h2 id="文件权限及内容显示">文件权限及内容显示</h2><br/><h3 id="文件权限-chmod">文件权限: chmod</h3><p>用户分类： 文件拥有者(user)、同组用户(group)、其他用户(others)<br>三种权限： 读®、写(w)、执行(x)</p><br/><h4 id="字符设定法">字符设定法</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">语法：chmod [who] [+ | - | =] [<span class="hljs-built_in">mode</span>] 文件名<br>说明：[who]可是下述字符中的一个或它们的组合：<br>u（user）：表示“用户”，即文件或目录的所有者<br>g（group）：表示“同组用户”<br>o（others）：表示“其他用户”<br>a（all）：表示“所有用户”<br>[+ | - | =] ：+表示添加某个权限；-表示取消某个权限；<br>=表示赋予给定权限<br>[<span class="hljs-built_in">mode</span>]：r(可读)、w(可写)、x(可执行)<br></code></pre></td></tr></table></figure><p>设定文件test1的属性为：文件属主（u）增加执行权限，与文件属主同组用户（g）增加执行权限，其他用户（o）增加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x test1<br></code></pre></td></tr></table></figure><p>设定文件test2的属性为：文件属主（u）增加写权限，与文件属主同组用户（g）增加写权限，其他用户（o）删除写、执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> ug+w,o-wx test2<br></code></pre></td></tr></table></figure><p>删除文件test3的执行权限，以下三个命令均可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a-x test3<br><span class="hljs-built_in">chmod</span> -x test3<br><span class="hljs-built_in">chmod</span> ugo-x test3<br></code></pre></td></tr></table></figure><p>把文件test4的执行权限改为rwxrw-rw-</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod <span class="hljs-attribute">u</span>=rwx,g=rw,o=rw test4<br></code></pre></td></tr></table></figure><br/><p>###数值设定法 -&gt; 数值计算： r:4, w:2, x:1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 数值 文件名<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">数值计算：若权限为[-rwxrw----]<br><span class="hljs-attribute">ower</span>=rwx=(111)2=4+2+1=7 <br><span class="hljs-attribute">group</span>=rw-=(110)2=4+2+0=6<br><span class="hljs-attribute">others</span>=---=(000)2=0<br>理解： mode可分为3个8进制数字，将每个8进制数字转化为2进制数字，1对应的赋予相应的权限，0对应的取消相应的权限<br></code></pre></td></tr></table></figure><p>设定文件aaa的属性为文件属主（u）拥有读、写权限，与文件属主同组用户（g）拥有读权限，其他人（o）拥有读权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">644</span> aaa<br></code></pre></td></tr></table></figure><p>设定bbb这个文件的属性为：文件属主（u）可读/可写/可执行权，与文件属主同组用户（g）可读/可执行权，其他人（o）没有任何权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">750</span> bbb<br></code></pre></td></tr></table></figure><h3 id="文件内容显示">文件内容显示</h3><h4 id="cat-查看文件，在屏幕上显示文件内容">cat: 查看文件，在屏幕上显示文件内容</h4><ol><li>-n 显示出行号</li><li>-A 显示文件中所有字符，包括隐藏字符</li></ol><br/><h4 id="more-分页显示文件内容">more: 分页显示文件内容</h4><p><strong>读完文件再显示</strong>；按住空格往前翻； <code>ctrl+f</code> 往前翻页；  <code>ctrl+b</code> 往后翻页；按q键退出所有查看的文件</p><br/><h4 id="less-分页显示文件内容">less: 分页显示文件内容</h4><p><strong>边读边显示，启动快</strong>；按住空格往前翻； <code>ctrl+f</code> 往前翻页；  <code>ctrl+b</code> 往后翻页；按q键退出所有查看的文件；less扩展了more命令的功能</p><br/><h4 id="head-查看文件头几行数据；了解文件中数据模式">head: 查看文件头几行数据；了解文件中数据模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -n 15 <span class="hljs-built_in">test</span> //查看<span class="hljs-built_in">test</span>文件的前15行<br><span class="hljs-built_in">head</span> <span class="hljs-built_in">test</span> //默认输出前10行<br></code></pre></td></tr></table></figure><br/><h4 id="tail：-查看文件末尾数据；多用于查看系统日志">tail： 查看文件末尾数据；多用于查看系统日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n 15 <span class="hljs-built_in">test</span> //查看<span class="hljs-built_in">test</span>文件的末尾15行<br><span class="hljs-built_in">tail</span> <span class="hljs-built_in">test</span> //默认输出末尾10行<br></code></pre></td></tr></table></figure><h2 id="管道">管道: |</h2><p>查看/etc目录下的文件，并将结果分页显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc | more<br></code></pre></td></tr></table></figure><p>查看系统中已安装软件中软件名包含字符’a’的所有软件，输出结果分页显示</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">dpkg -l | grep a | more<br></code></pre></td></tr></table></figure><h2 id="数据流">数据流</h2><p>标准输入(stdin)，标准输出(stdout)，标准错误输出(stderr)</p><ol><li><code>/dev/stdin</code> 标准输入 <code>0</code></li><li><code>/dev/stdout</code> 标准输出 <code>1</code></li><li><code>/dev/stderr</code> 标准错误输出 <code>2</code></li></ol><h3 id="数据流重定向">数据流重定向</h3><h4 id="输出重定向">输出重定向</h4><p><img src="https://uploadfiles.nowcoder.com/images/20210320/369118006_1616226631099/4D94653967AF1C5CDB3E74A0480E6419" alt="图片说明" title="图片标题"></p><p>以长格式形式列出/etc目录下文件信息，并将其重定向到文件right中</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> /etc &gt; <span class="hljs-keyword">right</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> <span class="hljs-keyword">right</span> &lt;=查看新建文件<br></code></pre></td></tr></table></figure><p>查看计算机网卡信息并将结果输出到文件right中</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ifconfig &gt;&gt; <span class="hljs-built_in">right</span><br></code></pre></td></tr></table></figure><p>命令运行正确时重定向到right,出错时重定向到error</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etca &gt;right 2&gt;error<br></code></pre></td></tr></table></figure><p>特殊用法：<br><img src="https://uploadfiles.nowcoder.com/images/20210320/369118006_1616227227623/D0569403B285BDACCEA0F87EED480350" alt="图片说明" title="图片标题"></p><p>将ls命令运行结果重定向到right_error （覆盖）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etc &gt;right_error 2&gt;&amp;1<br><span class="hljs-built_in">ls</span> -l /etc &amp;&gt;right_error<br></code></pre></td></tr></table></figure><p>将ls命令运行结果重定向到right_error （追加）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etc &gt;&gt;right_error 2&gt;&amp;1<br><span class="hljs-built_in">ls</span> -l /etc &amp;&gt;&gt;right_error<br></code></pre></td></tr></table></figure><h4 id="输入重定向-wc">输入重定向: wc</h4><ol><li>-l 统计行数</li><li>-w 统计单词数</li><li>-c 统计字节数<br>统计文件test的行数、单词数以及字节数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> &lt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h2 id="文本处理">文本处理</h2><h3 id="文本排序-sort-字典顺序">文本排序 sort(字典顺序)</h3><ol><li>-n 按数值大小排序</li><li>-u 对排序后相同的行只保留一行</li><li>-r 按逆序输出排序结果</li></ol><p>对文件file1以倒序形式排序并显示在屏幕上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sort</span> –<span class="hljs-built_in">r</span> file1或 <span class="hljs-built_in">cat</span> file1 | <span class="hljs-built_in">sort</span> <span class="hljs-literal">-r</span><br></code></pre></td></tr></table></figure><p>对文件file1排序并删掉重复的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> –u file1   或 <span class="hljs-built_in">cat</span> file1 | <span class="hljs-built_in">sort</span> -u<br></code></pre></td></tr></table></figure><p>对数值文件file2按数值从小到大进行排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> –n file2 或 <span class="hljs-built_in">cat</span> file2 | <span class="hljs-built_in">sort</span> -n<br></code></pre></td></tr></table></figure><h3 id="文本去重-uniq">文本去重 uniq</h3><ol><li>-d 只显示重复行</li><li>-u 只显示不重复行</li><li>-c 显示重复出现的次数</li></ol><p>使用uniq命令对文件file1去重后输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span><br></code></pre></td></tr></table></figure><p>查看文件file1中重复的数据内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span> -d<br></code></pre></td></tr></table></figure><p>查看文件file1中不重复的数据内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span> -u 来显示当前工作目录的<br></code></pre></td></tr></table></figure><h3 id="文本查找-grep">文本查找 grep</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grep <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[字符串]</span> 文件名<br></code></pre></td></tr></table></figure><ol><li>-c 只显示匹配的行数</li><li>-l 忽略字母大小写</li><li>-n 输出时加行号</li><li>-v 反转查找</li></ol><p>在/etc/adduser.conf文件中，查找含有adduser字符的行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> adduser <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>在adduser.conf文件中，查找不含&quot;#&quot;的行并列出行号</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -vn <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>在adduser.conf文件中，查找含有adduser字符的行数</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -c  adduser  <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>##文本剪切 cut</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">cut</span> <span class="hljs-operator">-</span><span class="hljs-variable">f</span> <span class="hljs-built_in">List</span> <span class="hljs-operator">-</span><span class="hljs-variable">d</span> <span class="hljs-built_in">Character</span> 文件<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">-f 获取被定界符隔开后指定的字段列表 `f代表field`<br> -d 指定分隔字符 `d代表delimeter`<br></code></pre></td></tr></table></figure><p><img src="https://uploadfiles.nowcoder.com/images/20210322/369118006_1616421511145/9A0C1B38D99D7EB1E8AA3DBA396CB981" alt="图片说明" title="图片标题"></p><h3 id="文本比较-diff">文本比较 diff</h3><ol><li>-c 以context模式显示比较的结果，相对normal</li><li>-y 以并列的方式显示文件的异同之处</li><li>-w 与选项-y一起使用，指定列宽</li></ol><h4 id="diff命令–context模式">diff命令–context模式</h4><br /><h2 id="文件查找">文件查找</h2><h4 id="find-在硬盘上查找文件或目录"><code>find</code> 在硬盘上查找文件或目录</h4><p>在当前目录下，查找属于user01用户的文件和目录</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">find . -<span class="hljs-keyword">user</span> <span class="hljs-title">user01</span><br></code></pre></td></tr></table></figure><p>查找当前目录及其子目录下所有最近2天内更新过的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -ctime -2<br></code></pre></td></tr></table></figure><h4 id="locate-后台数据库中按文件名搜索"><code>locate</code> 后台数据库中按文件名搜索</h4><p>-n 显示查找结果的个数</p><p>查找前3个文件passwd所在位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">locate</span> -n <span class="hljs-number">3</span> passwd<br></code></pre></td></tr></table></figure><ol><li>对于刚建立的文件，立即使用locate进行查找将会搜索不到所创建的文件，因为后台数据库一天更新一次；</li><li>若想使刚创建的文件能被立即搜索到，必须以root登陆，然后运行updatedb命令更新数据库。</li></ol><h4 id="查找指定文件位置-whereis">查找指定文件位置: whereis</h4><ol><li>-b 只查找二进制文件</li><li>-m 只查找说明文件</li><li>-s 只查找源代码文件</li></ol><br /><h2 id="文件压缩">文件压缩</h2><h4 id="gzip">gzip</h4><ol><li>-c 将输出写到标准输出上，并保留原有文件</li><li>-d 将压缩文件解压</li><li>-r 递归式地查找指定目录并压缩，解压缩</li></ol><p>用gzip命令将/home/lisi目录下的文件压缩</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## gzip /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>用命令将/home/lisi目录下所有的.gz文件解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># gzip -d /home/lisi/*</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># gunzip /home/lisi/*</span></span><br></code></pre></td></tr></table></figure><h4 id="bzip2-压缩效果略好于gzip">bzip2(压缩效果略好于gzip)</h4><ol><li>-d 解压缩选项</li><li>-v 显示压缩或解压缩的过程</li><li>-f 当文件重名时，进行覆盖</li></ol><p>使用bzip2命令压缩/home/lisi/目录下的文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## bzip2 /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>使用bzip2命令解压缩/home/lisi/目录下的文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## bzip2 -d /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h4 id="tar包">tar包</h4><p>将多个文件或目录打包成一个文件</p><ol><li>-z 用**<code>gzip</code>**命令进行压缩/解压缩</li><li>-j 通过**<code>bzip2</code>**命令进行压缩/解压缩</li><li>-C 指定解压目录</li><li>-c (压缩)创建新的备份文件，备份目录或文件时必选项(压缩)</li><li>-f 对普通文件进行操作（必选）</li><li>-r 向备份档文件追加文件</li><li>-x (解压缩)从备份档文件中解出文件</li><li>-t 列出备份文档中所含的文件</li><li>-v 列出处理过程中的详细信息</li></ol><br /><p>把/boot目录下文件和子目录打包，打包文件名为usr.tar</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -cvf usr.tar /boot<br></code></pre></td></tr></table></figure><p>把/boot目录下文件和子目录打包，并用gzip算法进行压缩，文件名为usr.tar.gz</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -zcvf usr.tar.gz /boot<br></code></pre></td></tr></table></figure><p>把usr.tar.gz这个打包文件还原并解压缩</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -zxvf usr.tar.gz<br></code></pre></td></tr></table></figure><p>把/boot目录下的文件和子目录打包，并用bzip2算法进行压缩，文件名为usr.tar.bz2</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -jcvf /boot usr.tar.bz2<br></code></pre></td></tr></table></figure><p>把usr.tar.bz2解压缩到目录/tmp</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -jxvf usr.tar.bz2 -C /tmp<br></code></pre></td></tr></table></figure><p>查看usr.tar备份文件的内容，并显示在显示器上</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -tvf usr.tar<br></code></pre></td></tr></table></figure><p>将文件/root/abc/d添加到usr.tar包里面去</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -rvf usr.tar /root/abc/d<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/greamrod/p/12488346.html">tar参考</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Ubuntu关机命令：&quot;&gt;Ubuntu关机命令：&lt;/h2&gt;
&lt;h4 id=&quot;shutdown&quot;&gt;shutdown:&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;sudo shutdown&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-k 并不会关机，只发出警告信息给所以用户&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数据操作工具awk</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux-awk%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux-awk%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T15:10:23.951Z</updated>
    
    <content type="html"><![CDATA[<h2 id="awk简介">awk简介</h2><p>一种便于使用且表达能力强的程序设计语言，适用于计算和数据处理任务</p><h3 id="awk与sed区别">awk与sed区别</h3><p><strong>sed</strong> 适用于在shell程序中对文本内容进行增删改查等操作<br><strong>awk</strong> 适用于计算和数据处理任务</p><h2 id="awk命令语法">awk命令语法</h2><p>awk ‘BEGIN{ commands } pattern{ commands } END{ commands }’</p><h2 id="awk命令运行过程">awk命令运行过程</h2><ol><li>通过关键字BEGIN执行BEGIN后花括号{}后的内容</li><li>pattern部分匹配成功后，依次对该行执行pattern后花括号后的内容，循环读取文件直到文件结束</li><li>开始 END 块执行，END 块可以输出最终结果</li></ol><h2 id="awk命令示例">awk命令示例</h2><p><img src="https://uploadfiles.nowcoder.com/images/20210524/369118006_1621844132524/AE45D4543A7F199C549F0BE9B5BF9D49" alt="图片说明" title="图片标题"></p><h3 id="仅包含主体模块">仅包含主体模块</h3><p>打印出工作时间超过零小时的员工的姓名和工资（薪资乘以时间）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> &#x27;$<span class="hljs-number">3</span> &gt;<span class="hljs-number">0</span> &#123; print $<span class="hljs-number">1</span>, $<span class="hljs-number">2</span> * $<span class="hljs-number">3</span> &#125;’ file  <br></code></pre></td></tr></table></figure><h3 id="包含主体模块和开始模块">包含主体模块和开始模块</h3><p>打印出工作时间超过零小时的员工的姓名和工资，第一行输出字符串 NAME和SALARY</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;BEGIN &#123;print “NAME SALARY”&#125;  <span class="hljs-variable">$3</span> &gt;0 &#123; print <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h3 id="包含所有模块">包含所有模块</h3><p>打印出所有员工的姓名和工资,第一行输出字符串 NAME和SALARY，最后要输出员工数、付出的总薪酬以及员工的平均薪酬</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk &#x27;BEGIN &#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;NAME SALARY&quot;</span>&#125;  <br>              &#123; <span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span>; <br>                     pay=pay+<span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>    &#125;  <br>         END&#123; <span class="hljs-keyword">print</span> NR, <span class="hljs-string">&quot;employees&quot;</span><br>                  <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;total pay is&quot;</span>, pay <br>                  <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;average pay is&quot;</span>, pay/NR<br>                  &#125;&#x27;  <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h2 id="数据输出">数据输出</h2><h3 id="简单输出">简单输出</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">打印所有行<br>   &#123; <span class="hljs-built_in">print</span> &#125;、&#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$0</span> &#125;<br>打印特定字段<br>   &#123; <span class="hljs-built_in">print</span> NF, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$3</span> &#125;、NF表示一行中字段总数量<br>   &#123; <span class="hljs-built_in">print</span> NR, <span class="hljs-variable">$0</span> &#125;、NR表示行号<br>打印时进行计算<br>   &#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;<br>输出中添加内容<br>   &#123; <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;total pay for&quot;</span>, <span class="hljs-variable">$1</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="包含所有模块-2">包含所有模块</h4><p>对文件file进行处理，打印出行号、每行字段数、姓名工资信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;&#123;print NR,NF,<span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>&#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h3 id="格式化输出">格式化输出</h3><p><strong>printf (format, value1, value2, …, valuen)</strong></p><ol><li>跟C语言printf语句格式基本一致</li><li>按照format格式排列输出内容</li></ol><br/>对文件file进行处理，打印出姓名、工资信息，并且要求姓名字段占8个字符宽度，对齐格式为左对齐；工资字段占6个字符的宽度，对齐格式为右对齐<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;&#123; printf(&quot;%-8s $%6.2f\n&quot;, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span>) &#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h2 id="数据选择">数据选择</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">通过对比选择<br>   <span class="hljs-variable">$2</span> &gt;=5 &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过计算选择<br>   <span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>&gt;50 &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过文本内容选择<br>   <span class="hljs-variable">$1</span> == <span class="hljs-string">&quot;Susie&quot;</span> &#123;<span class="hljs-built_in">print</span>&#125;<br>   /Susie/ &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过模式组合选择<br>   <span class="hljs-variable">$2</span>&gt;=4||<span class="hljs-variable">$3</span>&gt;=20 &#123;<span class="hljs-built_in">print</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;awk简介&quot;&gt;awk简介&lt;/h2&gt;
&lt;p&gt;一种便于使用且表达能力强的程序设计语言，适用于计算和数据处理任务&lt;/p&gt;
&lt;h3 id=&quot;awk与sed区别&quot;&gt;awk与sed区别&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;sed&lt;/strong&gt; 适用于在shell程序中对文本内</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>流式编辑命令sed</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux-sed%E6%B5%81%E5%BC%8F%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux-sed%E6%B5%81%E5%BC%8F%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T15:14:14.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sed简介">sed简介</h2><ol><li>一种新型的，非交互式的编辑器（vi编辑器为交互式）<br>2.sed编辑器没有破坏性，它不会修改文件<br>3.默认输出到屏幕</li></ol><h2 id="sed工作过程">sed工作过程</h2><p>1.从文件中读入一行数据并把它保存在临时缓冲区中<br>2.处理临时缓冲区的内容，并将处理结果发送到显示器上<br>3.逐行处理文件所有内容直到最后一行</p><h2 id="sed-命令语法">sed 命令语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sed <span class="hljs-selector-attr">[选项]</span> ‘脚本’ 文件<br></code></pre></td></tr></table></figure><h3 id="选项">选项</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-n  使用安静模式</span><br><span class="hljs-deletion">-e  多重编辑选项</span><br><span class="hljs-deletion">-f   指定一个 sed 脚本文件到命令行执行</span><br><span class="hljs-deletion">-r   sed 使用扩展正则表达式</span><br><span class="hljs-deletion">-I   直接修改文档读取的内容，不在屏幕上输出</span><br></code></pre></td></tr></table></figure><p>将文件file中的A用you来替换</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sed –n ‘s<span class="hljs-regexp">/A/y</span>ou/p’ <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>在第一行前增加一行’ZS 90 85 B’，然后删除包含字符串” FC”的行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sed</span> -e &#x27;<span class="hljs-number">1</span>i ZS <span class="hljs-number">90</span> <span class="hljs-number">85</span> B&#x27; -e &#x27;/FC/d&#x27; file<br></code></pre></td></tr></table></figure><h3 id="脚本">脚本</h3><h4 id="地址定位：用于确定处理哪些行">地址定位：用于确定处理哪些行</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">单地址：n，指定的行，如：sed ‘<span class="hljs-number">3</span>s<span class="hljs-regexp">/A/y</span>ou/’ <span class="hljs-keyword">file</span><br>地址范围：n1,n2、n1,+n2、 <span class="hljs-regexp">/pat1/</span>,<span class="hljs-regexp">/pat2/</span>、 n1,<span class="hljs-regexp">/pat1/</span> <br><span class="hljs-regexp">/pat/</span>：模式pat所能够匹配到的每一行<br>~：步进，<span class="hljs-number">1</span>~<span class="hljs-number">2</span> 奇数行、 <span class="hljs-number">2</span>~<span class="hljs-number">2</span> 偶数行<br>不给地址：对全文进行处理<br></code></pre></td></tr></table></figure><p>将文件file中的奇数行中的A用you来替换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sed</span> &#x27;<span class="hljs-number">1</span>~<span class="hljs-number">2</span> s/A/you/&#x27; file<br></code></pre></td></tr></table></figure><p>将文件file中的/C/和/A/之间的A用you来替换</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sed ‘<span class="hljs-regexp">/C/</span>,<span class="hljs-regexp">/A/</span> s<span class="hljs-regexp">/A/y</span>ou/’ <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h4 id="编辑命令：对文本进行增删改查等操作">编辑命令：对文本进行增删改查等操作</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span>：在指定行后面追加文本；支持使用\<span class="hljs-selector-tag">n</span>实现多行追加 <br><span class="hljs-selector-tag">i</span>：在指定行前面插入文本 <br><span class="hljs-selector-tag">d</span>：删除匹配的行<br><span class="hljs-selector-tag">s</span>：替换字符串, <span class="hljs-selector-tag">s</span><span class="hljs-comment">///，s@@@，s###</span><br><span class="hljs-selector-tag">c</span>：替换匹配行<br></code></pre></td></tr></table></figure><p>在文件file中的第一行后增加两行，”Hello Linux!\nHello sed！”</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;1a Hello Linux!\nHello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>删除文件file包含字符9的行</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/9/d&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将文件file中的字符串/bin/bash替换成/bin/csh</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;s#/bin/bash#/bin/csh#&#x27;</span> <span class="hljs-keyword">file</span>   (采用＃号分隔符)<br></code></pre></td></tr></table></figure><p>将第3行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;3c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将包含字符A的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/A/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h4 id="sed正则中的元字符">sed正则中的元字符</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">^：表示行首 <br>$：表示行尾 <br><span class="hljs-string">[a-z0-9]</span>：表示字符范围<br><span class="hljs-string">[^]</span>：表示除了字符集中的字符以外的字符<br>. ：表示任意字符 <br>*：表示零个或者多个<br></code></pre></td></tr></table></figure><p>将以字符A开头的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/^A/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将以字符A的结尾的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/A$/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将以字符A、B开头的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/^[AB]/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sed简介&quot;&gt;sed简介&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;一种新型的，非交互式的编辑器（vi编辑器为交互式）&lt;br&gt;
2.sed编辑器没有破坏性，它不会修改文件&lt;br&gt;
3.默认输出到屏幕&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;sed工作过程&quot;&gt;sed工作过程&lt;/h2</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>shell脚本程序</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T15:03:14.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell脚本特点">shell脚本特点</h2><p><em>1.  适合对服务器管理</em><br><em>2.  不适合做大量数值运算的任务</em><br><em>3.</em></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">第一行 #!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><br><h2 id="shell脚本运行方式">shell脚本运行方式</h2><ol><li><p><code>sh/bash 文件名</code><br>创建子进程运行：程序运行完后程序中的变量失效</p></li><li><p><code>./文件名</code><br>先将文件变成可执行文件，如：<code>chmod 711 sh01.sh</code><br>创建子进程运行：程序运行完后程序中的变量失效</p></li><li><p><code>source 文件名</code><br>当前(父)进程运行：程序运行完后程序中的变量有效</p></li></ol><br><h2 id="shell脚本运行过程">shell脚本运行过程</h2><ol><li>命令执行自上而下、自左向右；</li><li>命令、参数间多个空白、空白行被忽略；</li><li>程序中读到一个Enter符号（CR），就尝试开始执行该行命令；</li><li>一行内容太多，可使用”[Enter]”来扩展至下行；</li></ol><br><h2 id="shell变量">shell变量</h2><h3 id="本地变量：">本地变量：</h3><p>变量名＝变量值<br><code>s1=hello</code><br><code>s2=&quot;hello world&quot;</code><br>若等号两边有空格，则必须使用引号括起来</p><h3 id="环境变量：">环境变量：</h3><p>export 变量名＝变量值<br><code>export s1=hello</code></p><h3 id="预定义变量：">预定义变量：</h3><p>预定义变量是系统自带的变量，系统启动后即存在<br>常见预定义变量<br><img src="https://uploadfiles.nowcoder.com/images/20210426/369118006_1619450539194/48C9588BDBC44ED6FE18A3A8405A17DC" alt="图片说明" title="图片标题"></p><h3 id="变量的设置规则：">变量的设置规则：</h3><ol><li>变量与变量值以等号“=”来连接</li><li>等号两边不能直接接空格</li><li>变量名称只能是英文字母、下划线与数字，但数字不能是开头字符</li><li>若有空格，可以使用双引号或单引号将变量内容括起来</li></ol><h3 id="变量的引用：">变量的引用：</h3><p>引用变量时则应在变量名前加一个美元符号<code>$</code></p><p><code>s1=hello</code><br><code>s3=$s1</code></p><h3 id="变量的显示：echo命令">变量的显示：<code>echo</code>命令</h3><ol><li>echo $变量名</li><li>echo ${变量名}</li><li>echo “$变量名”</li></ol><h3 id="变量的读入：read命令">变量的读入：<code>read</code>命令</h3><p><code>read [-pt] 变量名</code><br>-p：后面可以接提示信息<br>-t：后面可接等待的秒数，为了防止一直等待用户输入。</p><h3 id="变量的释放：unset命令">变量的释放：<code>unset</code>命令</h3><p><code>unset s1</code></p><h3 id="查看系统环境变量：env">查看系统环境变量：<code>env</code></h3><p>常见环境变量 <code>echo $PATH</code><br><img src="https://uploadfiles.nowcoder.com/images/20210426/369118006_1619450393872/642B4A9D58C8B7074C55CD3E28AA2F21" alt="图片说明" title="图片标题"></p><p>将路径/usr/hadoop/bin加入到命令搜索路径PATH变量中</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/hadoop/bin</span><br>或<br>vi .bashrc  在末尾加入  <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/hadoop/bin</span><br></code></pre></td></tr></table></figure><p>#条件判断式</p><h2 id="test命令">test命令</h2><h3 id="文件的存在性测试">文件的存在性测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-e文件是否存在 (常用)</span><br><span class="hljs-deletion">-f文件是否存在且为文件(file) (常用)</span><br><span class="hljs-deletion">-d文件是否存在且为目录(directory) (常用)</span><br><span class="hljs-deletion">-b文件是否存在且为一个block device 文件</span><br><span class="hljs-deletion">-c文件是否存在且为一个character device 文件</span><br><span class="hljs-deletion">-S文件是否存在且为一个Socket 文件</span><br><span class="hljs-deletion">-p文件是否存在且为一个FIFO (pipe) 文件</span><br><span class="hljs-deletion">-L文件是否存在且为一个链接文件</span><br></code></pre></td></tr></table></figure><h3 id="文件的权限测试">文件的权限测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-r检测该文件是否存在且具有『可读』的权限</span><br><span class="hljs-deletion">-w检测文件是否存在且具有『可写』的权限</span><br><span class="hljs-deletion">-x检测文件是否存在且具有『可运行』的权限</span><br><span class="hljs-deletion">-u检测文件是否存在且具有『SUID』的属性</span><br><span class="hljs-deletion">-g检测文件是否存在且具有『SGID』的属性</span><br><span class="hljs-deletion">-k检测文件是否存在且具有『Sticky bit』的属性</span><br><span class="hljs-deletion">-s检测文件是否存在且为『非空白文件』</span><br></code></pre></td></tr></table></figure><h3 id="文件的新旧测试">文件的新旧测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-nt(newer than)判断两个文件到底哪一个文件要新</span><br><span class="hljs-deletion">-ot(older than)判断两个文件哪个文件要旧</span><br><span class="hljs-deletion">-ef判断两个文件是否为同一文件，可用于判断硬链接文件</span><br></code></pre></td></tr></table></figure><h3 id="数值大小测试">数值大小测试</h3><p>关于两个整数之间的判定：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake">-eq测试两数值是否相等(<span class="hljs-keyword">equal</span>)<br>-ne测试两数值是否不等(<span class="hljs-keyword">not</span> <span class="hljs-keyword">equal</span>)<br>-gt测试前一个数值n1 是否大于后一个数值n2 (<span class="hljs-keyword">greater</span> than)<br>-lt测试n1 是否小于n2 (<span class="hljs-keyword">less</span> than)<br>-ge测试n1是否 大于等于n2 (<span class="hljs-keyword">greater</span> than <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>)<br>-le测试n1是否 小于等于n2 (<span class="hljs-keyword">less</span> than <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>)<br></code></pre></td></tr></table></figure><h3 id="字符串测试">字符串测试</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">-z用于测试字符串长度是否为<span class="hljs-number">0</span>，若字符串为空，则返回<span class="hljs-literal">true</span><br>-n用于测试字符串长度是否为非<span class="hljs-number">0</span>，若字符串为非空，则返回<span class="hljs-literal">true</span><br> =用于判断两个字符串是否相等，若相等则返回<span class="hljs-literal">true</span><br>!=用于判断两个字符串是否不相等，若不相等，则返回<span class="hljs-literal">true</span><br>      (等号或不等号两边必须要有空格)<br></code></pre></td></tr></table></figure><h3 id="多重条件判定">多重条件判定</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a两种情况同时成立时才回传true    (and)</span><br><span class="hljs-deletion">-o两种情况任何一个成立就可回传true    (or)</span><br><span class="hljs-addition">!反相状态</span><br></code></pre></td></tr></table></figure><h3 id="例题">例题</h3><p>使用者输入一个档名，程序判断：</p><ol><li>这个文件是否存在，若不存在则给予一个『Filename does not exist』的信息，并中断程序；（命令排列）</li><li>若这个文件存在，则判断它是文件还是目录，结果输出『Filename is regular file』或 『Filename is directory』</li><li>判断当前用户对这个文件或目录所拥有的权限，并输出权限信息！</li></ol><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs subunit">1. 让使用者输入文件名，并且判断使用者是否真的有输入字串？<br>echo -e &quot;Please input a filename, I will check the filename&#x27;s type and permission. \n\n&quot;<br>read -p &quot;Input a filename : &quot; filename<br><span class="hljs-keyword">test </span>-z $filename &amp;&amp; echo &quot;You MUST input a filename.&quot; &amp;&amp; exit 0<br>2. 判断文件是否存在？若不存在则显示信息并结束脚本<br><span class="hljs-keyword">test </span>! -e $filename &amp;&amp; echo &quot;The filename &#x27;$filename&#x27; DO NOT exist&quot; &amp;&amp; exit 0<br>3.  开始判断文件类型与属性<br><span class="hljs-keyword">test </span>-f $filename &amp;&amp; filetype=&quot;regulare file&quot;<br><span class="hljs-keyword">test </span>-d $filename &amp;&amp; filetype=&quot;directory&quot;<br><span class="hljs-keyword">test </span>-r $filename &amp;&amp; perm=&quot;readable&quot;<br><span class="hljs-keyword">test </span>-w $filename &amp;&amp; perm=&quot;$perm writable&quot;<br><span class="hljs-keyword">test </span>-x $filename &amp;&amp; perm=&quot;$perm executable&quot;<br>4.  开始输出<br>echo &quot;The filename: $filename is a $filetype&quot;<br>echo &quot;And the permissions are : $perm&quot;<br></code></pre></td></tr></table></figure><h2 id="条件判断符">条件判断符</h2><h3 id="中括号判断符">中括号判断符: []</h3><p>能实现和test命令一样的功能;<br>为了与通配符区分，各元素间均有空格；<br><img src="https://uploadfiles.nowcoder.com/images/20210427/369118006_1619516227214/E6D9361A6BD4B8442E395228CABCE477" alt="图片说明" title="图片标题"></p><br><h2 id="条件结构化命令-if-else">条件结构化命令 if-else</h2><h3 id="单层条件结构化命令">单层条件结构化命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [条件判断式 ]; <span class="hljs-keyword">then</span><br>    语句1<br><span class="hljs-keyword">else</span><br>    语句2<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="多层条件结构化命令">多层条件结构化命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 条件判断式1 ]; <span class="hljs-keyword">then</span><br>    语句1<br><span class="hljs-keyword">elif</span>  [ 条件判断式2 ]; <span class="hljs-keyword">then</span><br>    语句2<br><span class="hljs-keyword">else</span><br>    语句3<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="case命令">case命令</h2><h3 id="格式">格式</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">case  <span class="hljs-tag">&lt;<span class="hljs-name">变量</span>&gt;</span>  in</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">字符串1</span>&gt;</span> )  </span><span class="hljs-template-variable">&#123;&lt;命令清单1&gt;&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">字符串n</span>&gt;</span> )  </span><span class="hljs-template-variable">&#123;&lt;命令清单n&gt;&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">*)  </span><span class="hljs-template-variable">&#123;其他命令&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">esac</span><br></code></pre></td></tr></table></figure><h3 id="例题-2">例题</h3><p>写一个shell脚本命名为capital，要求运行程序时输入国家名字，程序能输出这个国家的首都。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>  China)   <span class="hljs-built_in">echo</span> Beijing;;<br>  USA)      <span class="hljs-built_in">echo</span> Washington;;<br>  British)  <span class="hljs-built_in">echo</span> London;;<br>  Russia)   <span class="hljs-built_in">echo</span> Moskow;;<br>  *)<span class="hljs-built_in">echo</span> Out of my knowledge;; <br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><br><h2 id="循环结构化命令">循环结构化命令</h2><h3 id="for循环语句">for循环语句</h3><h4 id="语法一">语法一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span>((变量赋值; 条件判断; 变量迭代))<br><span class="hljs-keyword">do</span> <br>    语句块1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>编写一个程序，打印乘法公式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span>((i=<span class="hljs-number">1</span>; i&lt;<span class="hljs-number">10</span>; i++))<br><span class="hljs-keyword">do</span> <br>    <span class="hljs-keyword">for</span>((j=<span class="hljs-number">1</span>; j&lt;=i; j++))<br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> -n “<span class="hljs-variable">$j</span>*<span class="hljs-variable">$i</span>=$((<span class="hljs-variable">$i</span>*<span class="hljs-variable">$j</span>)) ”<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -eq <span class="hljs-variable">$j</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> $‘\n’<br>    <span class="hljs-keyword">fi</span>   <br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="语法二">语法二</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span>  <span class="hljs-keyword">var</span>  <span class="hljs-keyword">in</span>  item1 item2 … itemN<br><span class="hljs-keyword">do</span> <br>    语句块<span class="hljs-number">1</span><br>done<br></code></pre></td></tr></table></figure><h4 id="取值列表是变量">取值列表是变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">list</span>=“beijing tianjing shanghai guangzhou”<br><span class="hljs-attribute">list</span>=<span class="hljs-variable">$list</span>” xizang”<br><span class="hljs-keyword">for</span> scenery <span class="hljs-keyword">in</span> <span class="hljs-variable">$list</span><br><span class="hljs-keyword">do</span> <br>    echo “Have you visited <span class="hljs-variable">$scenery</span>?”<br>done<br><br>*<br>Have you visited beijing?<br>Have you visited tianjing?<br>Have you visited shanghai?<br>Have you visited guangzhou?<br>Have you visited xizang?<br></code></pre></td></tr></table></figure><h4 id="取值列表存在文件中">取值列表存在文件中</h4><p><img src="https://uploadfiles.nowcoder.com/images/20210427/369118006_1619519388689/C895BDE262979453BE63020C2C85311F" alt="图片说明" title="图片标题"></p><h3 id="while循环语句">while循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [  条件判断式  ]<br><span class="hljs-keyword">do</span><br>语句块1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>当用户输入break或者BREAK才结束程序执行，否则就一直告知用户输入字符串，并将用户输入字符串输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">while</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> != “<span class="hljs-built_in">break</span><span class="hljs-string">&quot; -a &quot;</span><span class="hljs-variable">$yn</span><span class="hljs-string">&quot; != “BREAK&quot;</span> ]<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p “Please input a string :  (<span class="hljs-built_in">break</span>/Break to stop) <span class="hljs-string">&quot; yn</span><br><span class="hljs-string">echo You input a string : <span class="hljs-variable">$yn</span></span><br><span class="hljs-string">done</span><br><span class="hljs-string">echo &quot;</span>OK! you interrupt the program.<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>编写猜字游戏，当用户输入指定的字符串后才结束游戏，否则就一直告知用户再试一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p $’Guess word\n ( Tips : The word consists of four blocks, the first word is “g”, the last word is “d”)\n’ word<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$word</span> != “good” ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> “Try again!”<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> “Bingo, you are right!”<br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">shell脚本程序相关</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>hadoop命令</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AEhadoop%E5%91%BD%E4%BB%A4/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AEhadoop%E5%91%BD%E4%BB%A4/</id>
    <published>2023-03-20T13:00:00.000Z</published>
    <updated>2023-03-20T14:59:53.267Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gradle">gedit <span class="hljs-regexp">/home/</span>hadoop/.bashrc<br><br>.<span class="hljs-regexp">/hadoop/</span>sbin/start-all.sh<br><br>.<span class="hljs-regexp">/hadoop/</span>sbin/stop-all.sh <br><br>scp -r <span class="hljs-regexp">/home/</span>hadoop<span class="hljs-regexp">/phoenix hadoop3:/</span>home<span class="hljs-regexp">/hadoop/</span><br><br>zkServer.sh start<br>zkServer.sh stop<br><br>zookeeper<span class="hljs-regexp">/bin/</span>zkCli.sh -server hadoop1:<span class="hljs-number">2181</span><br><br>zookeeper<span class="hljs-regexp">/bin/</span>zkServer.sh status<br><br>hbase<span class="hljs-regexp">/bin/</span>start-hbase.sh<br>hbase<span class="hljs-regexp">/bin/</span>stop-hbase.sh<br><br>hadoop fs -ls -R -h /user<br>hadoop fs -mkdir -p <span class="hljs-regexp">/user/</span>hadoop/demo<br>hadoop fs -mv <span class="hljs-regexp">/user/</span>hadoop<span class="hljs-regexp">/demo.txt /u</span>ser<span class="hljs-regexp">/hadoop/</span>demo/demo.txt<br><br>phoenix<span class="hljs-regexp">/bin/</span>sqlline.py hadoop1,hadoop2,hadoop3:<span class="hljs-number">2181</span><br>SELECT * <span class="hljs-keyword">FROM</span> STUDENT LIMIT <span class="hljs-number">1000</span>;<br><br><span class="hljs-regexp">/etc/i</span>nit.d/mysqld start<br>mysql -u root –p<br>mysql -h localhost -u root -p<br><br>create table myclass(<br>id <span class="hljs-keyword">int</span>(<span class="hljs-number">4</span>) not <span class="hljs-keyword">null</span> primary key auto_increment,<br>name <span class="hljs-keyword">char</span>(<span class="hljs-number">20</span>) not <span class="hljs-keyword">null</span>,<br>sex <span class="hljs-keyword">int</span>(<span class="hljs-number">4</span>) not <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>degree <span class="hljs-keyword">double</span>(<span class="hljs-number">16</span>,<span class="hljs-number">2</span>));<br><br>schematool -dbType mysql –initSchema  (创建hive元数据表)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">hadoop、zookeeper、hbase、mysql启停操作</summary>
    
    
    
    <category term="大数据" scheme="https://rubyrose-tat.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux日常管理与维护</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux%E6%97%A5%E5%B8%B8%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux%E6%97%A5%E5%B8%B8%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:13:18.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="任务计划">任务计划</h2><p>若希望在固定时间触发某个作业，就需要创建任务计划，按时执行该作业</p><h4 id="cron实现任务计划方式">cron实现任务计划方式</h4><ol><li>可通过修改/etc/crontab文件<br>root用户通过修改/etc/crontab文件可以实现任务计划，而普通用户却无法修改<br>2.使用crontab命令实现</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">SHELL</span>=<span class="hljs-regexp">/bin/bash</span><br><span class="hljs-variable constant_">PATH</span>=<span class="hljs-regexp">/sbin:/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><br><span class="hljs-variable constant_">MAILTO</span>=root<br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name command to be executed</span><br></code></pre></td></tr></table></figure><br><table><thead><tr><th style="text-align:center">内容</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">minute</td><td>分钟，0～59之间的任何整数</td></tr><tr><td style="text-align:center">hour</td><td>小时，0～23之间的任何整数</td></tr><tr><td style="text-align:center">day</td><td>日期，从 1～31之间的任何整数（如果指定了月份，必须是该月份的有效日期）</td></tr><tr><td style="text-align:center">month</td><td>月份，1～12之间的任何整数（或使用月份的英文简写如jan、feb等</td></tr><tr><td style="text-align:center">day of week</td><td>星期，0～7之间的任何整数，这里的0或7代表星期日（或使用星期的英文简写如sun、mon等）</td></tr><tr><td style="text-align:center">user-name</td><td>执行命令的用户</td></tr><tr><td style="text-align:center">command</td><td>要执行的命令或者是自己编写的脚本</td></tr></tbody></table><br><table><thead><tr><th style="text-align:center">时间格式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>可以用来代表所有有效的值。如月份值中的星号意味着在满足其它制约条件后每月都执行该命令</td></tr><tr><td style="text-align:center">-</td><td>指定一个整数范围。比如1-4意味着整数1、2、3、4</td></tr><tr><td style="text-align:center">,</td><td>指定隔开的一系列值指定一个列表。比如3,4,6,8标明这4个指定的整数</td></tr><tr><td style="text-align:center">/</td><td>可以用来指定间隔频率。在范围后加上/<integer>意味着在范围内可以跳过integer。如“0-59/2”可以用来在分钟字段上定义时间间隔为两分钟。间隔频率值还可以和星号一起使用，如“*/3”的值可以用在月份字段中表示每3个月运行一次任务。</td></tr></tbody></table><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">SHELL=<span class="hljs-regexp">/bin/</span>bash<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br><br><span class="hljs-regexp">//</span>在每星期六的<span class="hljs-number">23</span>:<span class="hljs-number">00</span>执行 <span class="hljs-regexp">/root/</span>backup.sh<br><span class="hljs-number">0</span> <span class="hljs-number">23</span> * * <span class="hljs-number">6</span> root <span class="hljs-regexp">/root/</span>backup.sh<br><br><span class="hljs-regexp">//</span>在每天<span class="hljs-number">18</span>:<span class="hljs-number">00</span>～<span class="hljs-number">23</span>:<span class="hljs-number">00</span>之间每隔<span class="hljs-number">30</span>分钟执行<span class="hljs-regexp">/root/</span>backup.sh<br><span class="hljs-number">0</span>,<span class="hljs-number">30</span> <span class="hljs-number">18</span>-<span class="hljs-number">23</span> * * * root <span class="hljs-regexp">/root/</span>backup.sh<br><br><span class="hljs-regexp">//</span>每隔<span class="hljs-number">2</span>月，在晚上的<span class="hljs-number">21</span>:<span class="hljs-number">30</span>执行<span class="hljs-regexp">/root/</span>backup.sh文件<br><span class="hljs-number">30</span> <span class="hljs-number">21</span> * *<span class="hljs-regexp">/2 * root /</span>root/backup.sh<br></code></pre></td></tr></table></figure><br><h4 id="backup-sh文件-备份文件">backup.sh文件(备份文件)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#对/boot目录进行备份，备份文件名称包括备份时具体时间</span><br><br>tar -zcvf ~/boot _$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;today&quot;</span> +<span class="hljs-string">&quot;%Y%m%d_%H%M&quot;</span>).tar.gz /boot<br></code></pre></td></tr></table></figure><p>每天晚上1:00读取/var/log/auth.log文件的后100行内容追加到文件/root/auth.log</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> * * * root tail -<span class="hljs-number">100</span> /var/<span class="hljs-keyword">log</span>/auth.<span class="hljs-keyword">log</span> &gt;&gt; /root/auth.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><br><h3 id="普通用户任务计划">普通用户任务计划</h3><h4 id="root以外的用户可用crontab命令配置cron任务">root以外的用户可用crontab命令配置cron任务</h4><ol><li>登录然后输入crontab -e命令</li><li>编辑crontab，编辑格式和/etc/crontab相同</li><li>当对crontab所做的改变被保存后（输入:wq），该crontab文件会根据该用户名被保chun在 /var/spool/cron/<username> 文件中</li></ol><h4 id="crond守护进程工作">crond守护进程工作</h4><p>1.每分钟都检查/etc/crontab文件、/etc/cron.d目录以及/var/spool/cron目录中的变化。<br>2.如果发现了改变，它们就会被载入内存</p><h4 id="列出crontab">列出crontab</h4><p>以root用户列出ruby的crontab</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@ubuntu</span> ~<span class="hljs-meta"># crontab -u ruby -l</span><br></code></pre></td></tr></table></figure><p>以普通用户ruby列出自己的crontab</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">ruby<span class="hljs-variable">@ubuntu</span> ~<span class="hljs-variable">$ </span>crontab -l<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;任务计划&quot;&gt;任务计划&lt;/h2&gt;
&lt;p&gt;若希望在固定时间触发某个作业，就需要创建任务计划，按时执行该作业&lt;/p&gt;
&lt;h4 id=&quot;cron实现任务计划方式&quot;&gt;cron实现任务计划方式&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;可通过修改/etc/crontab文件&lt;br&gt;
roo</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux网络基本配置</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:12:40.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用网络配置文件">常用网络配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>network/interfaces文件——&gt;静态IP地址配置<br><span class="hljs-regexp">/etc/</span>resolv.conf文件<br><span class="hljs-regexp">/etc/</span>hosts文件<br><span class="hljs-regexp">/etc/</span>services文件<br><span class="hljs-regexp">/etc/</span>hostname 文件——&gt;修改主机名<br></code></pre></td></tr></table></figure><h2 id="常用网络命令">常用网络命令</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ifconfig</span>  ——&gt;查看<span class="hljs-built_in">IP</span>地址<br><span class="hljs-symbol">ip</span> <span class="hljs-keyword">addr</span>   ——&gt;查看<span class="hljs-built_in">IP</span>地址<br><span class="hljs-symbol">ping</span>      ——&gt;测试与目的地的连通性<br><span class="hljs-symbol">traceroute</span> ——&gt;测试如何到达目的地<br><span class="hljs-symbol">netstat</span>   ——&gt;当前网络状态<br></code></pre></td></tr></table></figure><h3 id="ifconfig命令">ifconfig命令</h3><p>使用ifconfig命令可以显示和配置网络接口，比如设置IP地址、MAC地址、激活或关闭网络接口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ifconfig  <span class="hljs-selector-attr">[接口]</span> <span class="hljs-selector-attr">[选项|IP地址]</span> <br></code></pre></td></tr></table></figure><p>配置网卡ens33的IP地址， 同时激活该设备</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33 <span class="hljs-number">192.168.237.140</span> netmask <span class="hljs-number">255.255.255.0</span> up<br></code></pre></td></tr></table></figure><p>配置网卡ens33别名设备ens33:1的IP地址</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33:<span class="hljs-number">1</span> <span class="hljs-number">192.168.237.140</span><br></code></pre></td></tr></table></figure><p>激活网卡ens33:1设备</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33:<span class="hljs-number">1</span> up<br></code></pre></td></tr></table></figure><p>查看网卡ens33网络接口的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33<br></code></pre></td></tr></table></figure><p>查看所有的网卡网络接口配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span> <br></code></pre></td></tr></table></figure><h3 id="ping命令">ping命令</h3><p>使用ping命令可用于测试与目标计算机之间的连通性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ping <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[目标]</span><br></code></pre></td></tr></table></figure><p>测试与网站www.sina.com.cn的连通性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ping www<span class="hljs-selector-class">.sina</span><span class="hljs-selector-class">.com</span>.cn<br></code></pre></td></tr></table></figure><p>测试与192.168.237.149计算机的连通性，每次发送的ICMP数据包大小为128字节(默认字节数为56)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping</span> -s <span class="hljs-number">128</span> <span class="hljs-number">192.168.237.149</span><br></code></pre></td></tr></table></figure><p>测试与192.168.237.149计算机的连通性，要求返回4个ICMP数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping</span> -c <span class="hljs-number">4</span> <span class="hljs-number">192.168.237.149</span><br></code></pre></td></tr></table></figure><h3 id="traceroute命令">traceroute命令</h3><p>使用traceroute命令可以显示数据包到目标主机之间的路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">traceroute <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[主机名|IP地址]</span> <span class="hljs-selector-attr">[数据包大小]</span><br></code></pre></td></tr></table></figure><p>跟踪从本地计算机到www.163.com网站的路径</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">traceroute</span> www.<span class="hljs-number">163</span>.com<br></code></pre></td></tr></table></figure><p>关闭网卡ens33设备</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33 down<br></code></pre></td></tr></table></figure><p>更改网卡ens33的硬件MAC地址为00:0C:29:18:2E:3D</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33 hw ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">18</span>:<span class="hljs-number">2</span>E:<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><h3 id="netstat命令">netstat命令</h3><p>使用netstat命令可显示网络状态信息，得知整个Linux系统的网络情况，比如网络连接、路由表、接口统计、伪装连接和组播成员</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">netstat <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[延迟]</span><br></code></pre></td></tr></table></figure><p>显示内核路由表信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -r</span><br></code></pre></td></tr></table></figure><p>显示端口号为22的连接情况。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -antu<span class="hljs-string">| grep 22</span><br></code></pre></td></tr></table></figure><h2 id="管理网络服务">管理网络服务</h2><p>管理Linux系统服务方法有很多，最常用的是systemctl命令，它是RHEL7（CentOS 7）系统中新的管理服务命令，用来替代chkconfig和service命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">systemctl <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[单元命令|单元文件命令]</span><br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start sshd.service<br><span class="hljs-params">system</span>ctl status sshd.service<br><span class="hljs-params">system</span>ctl stop sshd.service<br><span class="hljs-params">system</span>ctl restart sshd.service<br><span class="hljs-params">system</span>ctl reload sshd.service<br><span class="hljs-params">system</span>ctl enable sshd.service<br><span class="hljs-params">system</span>ctl is-enabled sshd.service<br><span class="hljs-params">system</span>ctl disable sshd.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;常用网络配置文件&quot;&gt;常用网络配置文件&lt;/h2&gt;
&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Redis/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Redis/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:48:28.545Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Redis工作原理">Redis工作原理</h3><p>key-value存储系统，它支持的value类型相对较多，包括string、list、set、zset，这些数据都支持push/pop/add/remove及交并补等操作，而且这些操作都是<strong>原子性</strong>的，在此基础上，Redis支持各种不同方式的排序。为了保证效率，数据是缓存在<strong>内存</strong>中的，Redis会周期性的把数据写入磁盘或者把修改操作写入追加的记录文件，并在此基础上实现了master-slave同步</p><h3 id="Redis持久化-RDB">Redis持久化-RDB</h3><p>在Redis运行时，RDB程序将当前内存中的数据库快照保存到磁盘中，当Redis需要重启时，RDB程序会通过重载RDB文件来还原数据库</p><h6 id="保存（rdbSave）">保存（rdbSave）</h6><p>rdbSave负责将内存中的数据库数据以RDB格式保存到磁盘中，如果RDB文件已经存在将会替换已有的RDB文件。保存RDB文件期间会阻塞主进程，这段时间期间将不能处理新的客户端请求，直到保存完成为止。</p><h6 id="读取（rdbLoad）">读取（rdbLoad）</h6><p>当Redis启动时，会根据配置的持久化模式，决定是否读取RDB文件，并将其中的对象加载到内存中。</p><h3 id="Redis持久化-AOF">Redis持久化-AOF</h3><p>以协议文本的方式，将所有对数据库进行的写入命令记录到AOF文件，达到记录数据库状态的目的</p><h6 id="AOF的保存">AOF的保存</h6><ol><li>将客户端请求的命令转换为网络协议格式</li><li>将协议内容字符串追加到变量server.aof_buf中</li><li>当AOF系统达到设定的条件时，会调用aof_fsync(文件描述符号)将数据写入磁盘</li></ol><h6 id="AOF的读取">AOF的读取</h6><ol><li>AOF保存的是数据协议格式的数据，所以只要将AOF中的数据转换为命令，模拟客户端重新执行一遍，就可以还原所有数据库状态</li><li>创建模拟的客户端</li><li>读取AOF保存的文本，还原数据为原命令和原参数。然后使用模拟的客户端发出这个命令请求</li><li>继续执行第二步，直到读取完AOF文件</li></ol><h6 id="AOF重写流程">AOF重写流程</h6><ol><li>AOF重写完成会向主进程发送一个完成的信号</li><li>会将AOF重写缓存中的数据全部写入到文件中</li><li>用新的AOF文件，覆盖原有的AOF文件</li></ol><h6 id=""></h6>]]></content>
    
    
    <summary type="html">Redis面试题</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux进程管理</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:11:12.390Z</updated>
    
    <content type="html"><![CDATA[<h2 id="进程-VS-程序、作业">进程 VS 程序、作业</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">程序是一个静态的命令集合，不占系统运行资源；（源代码，<span class="hljs-keyword">CD</span>）<br>进程是一个随时都可能发生变化的、动态的、使用系统运行资源的程序；（正在运行，播放<span class="hljs-keyword">CD</span>）<br>一个程序可以启动多个进程；<br>作业是一系列按一定顺序执行的命令，可能会涉及到多个进程；（<span class="hljs-keyword">shell</span>脚本）<br></code></pre></td></tr></table></figure><h2 id="进程特征">进程特征</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">动态性：进程的实质是程序在多道程序系统中的一次执行过程，进程是动态产生、动态消亡的<br>并发性：任何进程都可以同其它进程一起并发执行<br>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位<br>异步性：由于进程间的相互制约，使得进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进<br>结构特征：进程由程序、数据和进程控制块三部分组成<br>多个不同的进程可以包含相同的程序：一个程序在不同的数据集里就构成不同的进程，能得到不同的结果；但是执行过程中，程序不能发生改变<br></code></pre></td></tr></table></figure><h2 id="进程种类">进程种类</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">交互式进程：一个由<span class="hljs-keyword">Shell</span><span class="language-bash">启动并控制的进程，交互式进程既可在前台运行，也可在后台运行</span><br>批处理进程：与终端无关，安排在指定时刻完成的一系列进程<br>守护进程：在引导系统时启动，以执行即时的操作系统任务，比如crond、rsyslogd、named等<br>监听状态的进程<br></code></pre></td></tr></table></figure><h2 id="查看系统进程信息">查看系统进程信息</h2><h3 id="进程查看命令-–-ps-命令">进程查看命令 – ps 命令</h3><p>ps [可选项]</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a显示所有进程，包括其他用户的进程</span><br><span class="hljs-deletion">-u显示基于用户的信息</span><br><span class="hljs-deletion">-x显示所有进程，不以终端来区分</span><br><span class="hljs-deletion">-t tty显示属于指定终端tty的进程</span><br><span class="hljs-deletion">-U user显示user用户所拥有的进程</span><br></code></pre></td></tr></table></figure><p>查看每位用户的全部进程</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps -<span class="hljs-built_in">aux</span><br></code></pre></td></tr></table></figure><p>查看当前进程状况</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ps</span> –u root<br></code></pre></td></tr></table></figure><p>查看tty1终端下的进程</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ps –<span class="hljs-built_in">t</span> tty1<br></code></pre></td></tr></table></figure><p>查看进程号为1659的进程  (PID)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ps</span> –p <span class="hljs-number">1659</span><br></code></pre></td></tr></table></figure><p>在命令行运行bash命令创建一个子进程  (PPID)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">bash<br>pstree -<span class="hljs-keyword">p</span> | <span class="hljs-keyword">grep</span> bash<br><br><span class="hljs-keyword">ps</span> –axj   可以查看系统中各进程的父进程<br></code></pre></td></tr></table></figure><br><p>ps命令输出字段的含义<br><img src="https://uploadfiles.nowcoder.com/images/20210621/369118006_1624262354736/1B392EF6ADD6BFEB354D342EA47EB89C" alt="图片说明" title="图片标题"></p><br><h3 id="系统监控命令-–-top-命令">系统监控命令 – top 命令</h3><p>top [可选项]</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c：显示每个程序的完整指令</span><br><span class="hljs-deletion">-d &lt;间隔秒数&gt;：设置top执行状况的间隔时间，单位以秒计算</span><br><span class="hljs-deletion">-n &lt;执行次数&gt;：设置监控信息的更新次数</span><br></code></pre></td></tr></table></figure><p>在执行top的过程中排序</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">shift + <span class="hljs-comment">&#x27;&#x27;</span><br><span class="hljs-symbol">A:</span>以执行的先后顺序排序<br><span class="hljs-symbol">T:</span>由启动的时间进行排序<br><span class="hljs-symbol">M:</span>以所占的内存大小排序<br><span class="hljs-symbol">P:</span>以所耗用的CPU资源排序<br></code></pre></td></tr></table></figure><p>只显示进程号为1659的进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">top</span> –<span class="hljs-selector-tag">p</span> <span class="hljs-number">1659</span><br></code></pre></td></tr></table></figure><p>只显示root用户的进程</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span> –u root<br></code></pre></td></tr></table></figure><h3 id="进程终止">进程终止</h3><h4 id="前台进程-Ctrl-C">前台进程:  [Ctrl+C]</h4><h4 id="后台进程-kill命令">后台进程:  kill命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">无条件<span class="hljs-built_in">kill</span>命令： <span class="hljs-built_in">kill</span> -9 &lt;PID&gt;<br>结束所有的后台进程：<span class="hljs-built_in">kill</span> 0<br></code></pre></td></tr></table></figure><p>终止系统中的named进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">先使用<span class="hljs-built_in">ps</span>命令查看进程，得到named进程对应的PID（<span class="hljs-number">3576</span>），使用<span class="hljs-built_in">kill</span>命令来终止此进程<br><span class="hljs-comment"># ps -aux | grep named</span><br><span class="hljs-comment"># kill 3576</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;进程-VS-程序、作业&quot;&gt;进程 VS 程序、作业&lt;/h2&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;spa</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>mysql安装</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/mysql%E5%AE%89%E8%A3%85/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/mysql%E5%AE%89%E8%A3%85/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:04:28.136Z</updated>
    
    <content type="html"><![CDATA[<h1>登录MySQL</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h1>8.0+安装教程</h1><ol><li>执行以下命令，下载并安装MySQL</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql80-community-release-el7-<span class="hljs-number">6</span>.noarch.rpm<br>yum -y install mysql80-community-release-el7-<span class="hljs-number">6</span>.noarch.rpm<br>yum -y install mysql-community-server<br></code></pre></td></tr></table></figure><ol start="2"><li>启动MySQL数据库</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld.service<br></code></pre></td></tr></table></figure><ol start="3"><li>查看MySQL初始密码</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&quot;password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><ol start="4"><li>登录数据库</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><ol start="5"><li>修改密码安全策略</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 临时修改密码<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;Root_12root&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">policy</span>=0;<br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">length</span>=1;<br></code></pre></td></tr></table></figure><ol start="6"><li>修改MySQL默认密码</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="7"><li>授予root用户远程管理权限</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br></code></pre></td></tr></table></figure><h1>创建数据库</h1><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">CREATE DATABASE <span class="hljs-keyword">new</span><span class="hljs-type">bee_mall_plus_db</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">mysql8.0+安装教程</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>大数据生态</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T12:49:39.271Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hadoop生态">Hadoop生态</h3><p>Hadoop分布式系统基础架构</p><h4 id="入门">入门:</h4><h6 id="1-常用端口号：">1.常用端口号：</h6><p>​2.xhdfs:50070yarn:80889000/8020历史服务器通信端口:19888</p><p>​3.xhdfs:9870yarn:8088内部通讯:9820/9000/8020历史服务器通信端口:19888</p><h6 id="2-常用配置：">2.常用配置：</h6><p>​2.xcore-site.xmlhdfs-site.xmlmapred-site.xmlyarn-site.xmlslaves</p><p>​3.xcore-site.xmlhdfs-site.xmlmapred-site.xmlyarn-site.xmlworkers</p><h4 id="HDFS：">HDFS：</h4><p>HDFS是一个分布式文件系统，用于存储大规模数据集。它将文件分割成数据块，并将这些数据块分布在Hadoop集群中的多个节点上。这种分布式存储方式可以提高数据的可靠性和可用性，同时也可以通过并行处理提高数据的处理效率。</p><p><em>针对的是<strong>文件</strong>的增删改</em></p><h6 id="1-hdfs读写流程">1.hdfs读写流程</h6><p><a href="https://blog.csdn.net/qq_26803795/article/details/104823533">深入分析HDFS原理及读写流程</a></p><h6 id="2-小文件的危害">2.小文件的危害</h6><p>​(1)存储NameNode150B<code>128g*(1024m*1024kb*1024B) / 150B = 9.1亿</code></p><p>​(2)计算默认切片规则，每个文件单独切片。</p><h6 id="3-小文件怎么解决">3.小文件怎么解决</h6><p>​（1）har归档</p><p>​（2）CombineTextInputformat把所有文件放到一起统一切片</p><p>​（3）JVM重用</p><p>​（4）副本数 3个</p><p>​（5）块大小:取决于硬盘的读写数独</p><p>​</p><table><thead><tr><th style="text-align:center">1.x</th><th style="text-align:center">64m</th></tr></thead><tbody><tr><td style="text-align:center">2.x  3.x</td><td style="text-align:center">128m</td></tr><tr><td style="text-align:center">本地</td><td style="text-align:center">32m</td></tr><tr><td style="text-align:center">企业</td><td style="text-align:center">128m,256m,512m</td></tr></tbody></table><h4 id="MapReduce">MapReduce:</h4><p>MapReduce是一种编程模型，用于分布式处理大规模数据集。它将数据分为多个小块，并在Hadoop集群中的多个节点上并行处理这些数据。MapReduce由两个阶段组成：Map阶段和Reduce阶段。在Map阶段，数据被映射成键值对；在Reduce阶段，相同键的值被合并。</p><h6 id="shuffle-及其优化">shuffle 及其优化</h6><p>map方法之后，reduce方法之前混洗的过程叫做shuffle</p><h4 id="YARN">YARN:</h4><p>YARN是Hadoop的资源管理器，用于管理Hadoop集群中的计算资源。它可以为不同的应用程序分配不同的资源，从而提高资源利用率。</p><h6 id="1-yarn的工作机制">1.yarn的工作机制</h6><p><a href="https://blog.csdn.net/qq_40348184/article/details/123612797">yarn工作机制及其他知识点整理</a></p><h6 id="2-调度器">2.调度器</h6><ol><li><p>FIFO支持单队列、先进先出，生产环境不会用</p></li><li><p>容量调度器（并行度更低）</p><p>支持多队列优先保证先进入的任务执行</p></li><li><p>公平调度器（并行度高）</p><p>支持多队列每个任务公平享有队列资源资源不够时可以按照缺额分配</p></li></ol><p>​默认队列：default</p><p>​创建多队列：按照部门 业务线</p><h4 id="HBase-列示存储">HBase: 列示存储</h4><p>HBase是一个分布式的NoSQL数据库，用于存储结构化数据。它是基于HDFS构建的，并且可以实现数据的实时访问和查询。HBase主要用于大数据分析和实时数据处理。</p><p><em>针对的是<strong>文件内容</strong>的增删改</em></p><p>（ES:查询速度第一，数据写入慢）</p><h4 id="Hive">Hive:</h4><p>Hive是一个基于Hadoop的数据仓库系统，用于处理结构化数据。它支持SQL查询，并且可以将SQL语句转换为MapReduce作业来处理数据。</p><p>sqoop （数据库迁移的工具，非框架）</p><h4 id="Flume">Flume:</h4><p>Flume是一个分布式的日志收集和聚合系统，用于从不同的数据源收集和传输数据。它可以将数据发送到Hadoop集群中的不同组件进行处理。</p><h4 id="Kafka">Kafka:</h4><p>Kafka是一个分布式的消息队列系统，用于在不同的应用程序之间传输数据。它可以处理大量的数据，并且可以在不同的应用程序之间实现实时数据传输。</p><p>azkaban(轻量级)/oozie(重量级)：资源/计算调度</p><h4 id="zookeeper：选举机制">zookeeper：选举机制</h4><p>ZooKeeper是一个分布式协调服务，用于管理Hadoop集群中的多个节点之间的通信。它可以帮助Hadoop集群实现高可用性、可靠性和一致性。ZooKeeper主要用于实现分布式锁、配置管理、命名服务等功能。</p><p>HA高可用：解决单点故障问题 （zookeeper解决）</p><p>单点故障：一个分布式集群中，主节点只有一台</p><h3 id="spark生态：">spark生态：</h3><p>替代MapReduce引擎</p><p>Spark是一个快速的分布式计算框架，用于处理大规模数据集。它支持多种编程语言，并且可以在Hadoop集群上运行。Spark可以在内存中缓存数据，并且可以通过分布式内存计算来加速数据处理。</p><p>spark-core</p><p>spark-sql</p><p>spark-streaming: 准实时</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hadoop生态&quot;&gt;Hadoop生态&lt;/h3&gt;
&lt;p&gt;Hadoop分布式系统基础架构&lt;/p&gt;
&lt;h4 id=&quot;入门&quot;&gt;入门:&lt;/h4&gt;
&lt;h6 id=&quot;1-常用端口号：&quot;&gt;1.常用端口号：&lt;/h6&gt;
&lt;p&gt;​		2.x		hdfs:50070	yarn:8088	</summary>
      
    
    
    
    <category term="大数据" scheme="https://rubyrose-tat.github.io/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>运维</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/%E8%BF%90%E7%BB%B4/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/%E8%BF%90%E7%BB%B4/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:53:24.875Z</updated>
    
    <content type="html"><![CDATA[<p>作为运维工程师，您需要掌握以下技能和技术路线：</p><ol><li>熟悉操作系统：运维工程师需要熟悉 Linux、Windows 等操作系统，包括系统安装、配置、优化、调试等。</li><li>熟悉网络技术：运维工程师需要熟悉 TCP/IP 协议、网络拓扑结构、路由器、交换机、防火墙等网络设备的配置和管理。</li><li>熟悉常用服务和应用：运维工程师需要熟悉常见的服务和应用，如 Web 服务器、数据库、缓存、消息队列等，能够进行安装、配置、优化、监控和故障排除。</li><li>熟悉自动化运维工具：运维工程师需要熟练掌握自动化运维工具，如 Ansible、SaltStack、Puppet 等，能够使用代码管理系统、自动化配置管理等技术提高工作效率。</li><li>熟悉监控和日志分析工具：运维工程师需要能够使用监控工具（如 Nagios、Zabbix、Prometheus 等）进行系统监控和报警，以及使用日志分析工具（如 ELK Stack、Splunk 等）进行日志分析和故障排除。</li><li>熟悉安全技术：运维工程师需要了解网络安全、数据安全等方面的知识，并能够进行安全策略的制定和实施，如访问控制、加密等。</li><li>具备编程和脚本能力：运维工程师需要掌握至少一门编程语言，如 Python、Perl、Shell 等，并能够编写脚本以简化重复性任务。</li><li>具备团队协作能力：运维工程师需要具备良好的团队协作能力，与开发人员、测试人员、产品经理等有效沟通，共同完成项目任务。</li></ol><p>DevOps</p><h2 id="Linux日常管理操作">Linux日常管理操作</h2><ol><li><p>用户管理：创建用户账号、修改密码、授权等。</p></li><li><p>文件系统管理：创建、删除、移动、复制文件和目录，查看磁盘空间等。</p></li><li><p>系统配置：设置网络配置、安装软件包、更新系统、设置系统服务等。</p></li><li><p>进程管理：查看、杀死进程、启动和停止服务等。</p></li><li><p>日志管理：查看和管理系统日志，包括系统日志、应用程序日志和安全日志等。</p></li><li><p>系统监控：查看系统性能、CPU、内存、网络等状态，以及监控服务状态和运行情况。</p></li><li><p>系统安全：设置防火墙、访问控制、SSH等安全相关配置，以及升级系统补丁、定期备份等操作。</p></li></ol><h4 id="用户和组管理">用户和组管理</h4><ul><li>添加用户：使用 useradd 命令添加新用户，例如：<code>sudo useradd username</code></li><li>删除用户：使用 userdel 命令删除用户，例如：<code>sudo userdel username</code></li><li>修改用户密码：使用 passwd 命令修改用户密码，例如：<code>sudo passwd username</code></li><li>创建组：使用 groupadd 命令创建新组，例如：<code>sudo groupadd groupname</code></li><li>添加用户到组：使用 usermod 命令将用户添加到组，例如：<code>sudo usermod -aG groupname username</code></li></ul><h4 id="文件和目录管理">文件和目录管理</h4><ul><li>创建目录：使用 mkdir 命令创建新目录，例如：<code>mkdir dirname</code></li><li>删除文件或目录：使用 rm 命令删除文件或目录，例如：<code>rm filename</code> 或 <code>rm -rf dirname</code></li><li>移动文件或目录：使用 mv 命令移动文件或目录，例如：<code>mv filename /path/to/new/location</code> 或 <code>mv dirname /path/to/new/location</code></li><li>复制文件或目录：使用 cp 命令复制文件或目录，例如：<code>cp filename /path/to/new/location</code> 或 <code>cp -r dirname /path/to/new/location</code></li><li>查看文件内容：使用 cat 命令查看文件内容，例如：<code>cat filename</code></li></ul><h4 id="系统服务管理">系统服务管理</h4><ul><li>启动服务：使用 systemctl 命令启动服务，例如：<code>sudo systemctl start servicename</code></li><li>停止服务：使用 systemctl 命令停止服务，例如：<code>sudo systemctl stop servicename</code></li><li>重启服务：使用 systemctl 命令重启服务，例如：<code>sudo systemctl restart servicename</code></li><li>查看服务状态：使用 systemctl 命令查看服务状态，例如：<code>sudo systemctl status servicename</code></li><li>设置服务开机自启：使用 systemctl 命令设置服务开机自启，例如：<code>sudo systemctl enable servicename</code></li></ul><h4 id="系统监测和性能优化">系统监测和性能优化</h4><ul><li>查看系统负载：使用 uptime 命令查看系统负载情况，例如：<code>uptime</code></li><li>查看系统内存使用情况：使用 free 命令查看系统内存使用情况，例如：<code>free -h</code></li><li>查看系统 CPU 使用情况：使用 top 命令查看系统 CPU 使用情况，例如：<code>top</code></li><li>查看磁盘使用情况：使用 df 命令查看磁盘使用情况，例如：<code>df -h</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;作为运维工程师，您需要掌握以下技能和技术路线：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;熟悉操作系统：运维工程师需要熟悉 Linux、Windows 等操作系统，包括系统安装、配置、优化、调试等。&lt;/li&gt;
&lt;li&gt;熟悉网络技术：运维工程师需要熟悉 TCP/IP 协议、网络拓扑结构、路由</summary>
      
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>mysql</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/mysql/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/mysql/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:47:17.655Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL语句">SQL语句</h2><hr><h4 id="增">增</h4><h6 id="创建用户：">创建用户：</h6><p><code>create user [用户名]@'%' identified by '123456' </code>;</p><h6 id="创建数据库：">创建数据库：</h6><p><code>create database [数据库名];</code></p><h6 id="创建数据库表：">创建数据库表：</h6><p><code>create table [表名] (id int, name char(30));</code></p><h6 id="插入数据">插入数据:</h6><p><code>insert into [表名] (id,name,age) values (1,'张三',21);</code></p><hr><h4 id="删">删</h4><h6 id="删除用户">删除用户:</h6><p><code>drop user [用户名]@'%';</code></p><h6 id="删除数据库">删除数据库:</h6><p><code>drop database [数据库名];</code></p><h6 id="删除数据表">删除数据表:</h6><p><code>drop table [表名];</code></p><h6 id="删除数据">删除数据:</h6><p><code>delete from [表名] where id=5;</code></p><p><code>delete from [表名] where age between 23 and 25;</code></p><hr><h4 id="改">改</h4><h6 id="修改表中的数据">修改表中的数据:</h6><p><code>update [表名] set age=21 where id=3;</code></p><h6 id="修改表的名称">修改表的名称:</h6><p><code>alter table [表名] rename [新表名];</code></p><h6 id="修改表的字段类型">修改表的字段类型:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># modify只能更改列定义(数据类型和其他属性)，不能更改列名<br>alter table [表名] modify name char(50);<br>describe [表名];<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># change 可以更改列名称和列定义<br>alter table [表名] change name username char(50);<br>describe [表名];<br></code></pre></td></tr></table></figure><h6 id="添加删除字段">添加删除字段:</h6><p><code>alter table [表名] add time datetime;</code></p><p><code>alter table [表名] drop time;</code></p><hr><h4 id="查">查</h4><h6 id="查看所有数据库">查看所有数据库:</h6><p><code>show databases;</code></p><h6 id="查看指定库内所有数据表">查看指定库内所有数据表:</h6><p><code>show tables;</code></p><h6 id="查看指定数据表的字段结构">查看指定数据表的字段结构:</h6><p><code>describe [表名];</code></p><h6 id="查看所有MySQL用户密码及登录方式">查看所有MySQL用户密码及登录方式:</h6><p><code>select User,Password,Host from mysql.user;</code></p><h6 id="例子">例子:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 库表 student.report<br># 查询姓李的同学的个数<br>select count(*) from student.report where Name like &#x27;李%&#x27;;<br># 查询表中成绩大于80的前2名同学的名字，并按分数从大到小的顺序排列<br>select Result from report ORDER BY Result DESC limit 2;<br></code></pre></td></tr></table></figure><hr><h4 id="授权">授权</h4><h6 id="授予用户全部权限">授予用户全部权限:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 给已存在用户授权<br>grant  all on [库名].[表名] to [用户名]@&#x27;%&#x27;;<br><br># 创建用户并授权<br>grant  all on [库名].[表名] to [用户名]@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><h6 id="取消用户的删除库、表、表中数据的权限">取消用户的删除库、表、表中数据的权限:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> # 取消删除权限<br>revoke drop,delete on [库名].[表名] from [用户名]@&#x27;%&#x27;;<br><br># 查看指定用户的授权<br>show grants for [用户名]@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><hr><h4 id="启动关闭">启动关闭</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># CentOS 6 及更早的版本中使用 service 命令来管理MySQL服务</span><br>service mysqld start<br>service mysqld stop<br>service mysqld restart<br>service mysqld status<br><br><span class="hljs-comment"># CentOS 7 或更新版本使用 systemctl 命令来管理MySQL服务</span><br>sudo systemctl start mysql  <span class="hljs-comment"># systemctl start mysqld.service</span><br>sudo systemctl stop mysql<br>sudo systemctl restart mysql<br>sudo systemctl status mysql<br><br><span class="hljs-comment"># 如果MySQL服务已经安装但没有作为系统服务运行，则可以使用以下命令手动启动和关闭MySQL服务</span><br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql start<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql stop<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql restart<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql status<br><br><span class="hljs-comment"># 登录数据库</span><br>mysql -uroot -p<br></code></pre></td></tr></table></figure><hr><h2 id="MySQL集群">MySQL集群</h2><hr><h5 id="MySQL主从工作原理">MySQL主从工作原理</h5><p>技术点：bin-log日志</p><p>开启主服务器的bin-log日志记录功能，将主服务器的bin-log日志传到从服务器，从服务器根据日志内容将数据还原到本地。</p><p><em>从服务器主动把主服务器上的数据同步到本地（备份）</em></p><p><img src="https://img01.anzhiy.cn/useruploads/114/2023/03/20/64187f13e831a.png" alt=""></p><h5 id="主从故障切换">主从故障切换</h5><p>从服务器切换为主服务器</p><ul><li><p>登陆所有从服务器查看POST信息，使用POST最大的作为新的主服务器</p></li><li><p>对该服务器执行<code>stop slave</code></p></li><li><p>修改 my.cnf 配置文件，开启该服务器的log-bin并重新启动数据库服务</p></li><li><p>登陆数据库执行<code>restet master,  show master status</code>查看主库信息</p><p>创建授权,同步用户与权限,修改对应服务器的IP地址等信息</p></li><li><p>登陆其它从库，执行change master操作，查看同步状态</p></li></ul><h5 id="数据库代理工具-Amoeba">数据库代理工具: Amoeba</h5><p>Amoeba致力于MySQL的分布式数据库前端代理层，它主要在应用层访问MySQL的时候充当SQL路由功能，专注于分布式数据库代理层（Database Proxy）开发。具有负载均衡、高可用、SQL过滤、读写分离、数据切片的功能。</p><p><img src="https://img01.anzhiy.cn/useruploads/114/2023/03/20/64187f13e8481.png" alt=""></p><h2 id="MySQL索引">MySQL索引</h2><h5 id="什么是索引">什么是索引</h5><p>在MySQL数据库中，索引是一种用于优化查询性能的关键组件。索引的本质是数据结构，可以加速数据的查找和排序，通过减少磁盘I/O和内存操作来提高查询效率。</p><p>MySQL支持多种类型的索引，包括B-Tree索引、Hash索引、Full-Text索引等。其中，B-Tree索引是最常见的索引类型，也是MySQL默认的索引类型。</p><h5 id="索引的分类">索引的分类</h5><p>主键索引</p><p>单值索引一个索引只包含单个列，一个表可以有多个单列索引。如果字段会被经常用来检索就可以用单值索引。</p><p>复合索引一个索引包含多个列</p><p>唯一索引所有列的值必须唯一，但是允许有空值。</p><p>普通索引和唯一索引可以称为辅助索引</p><h5 id="优势">优势</h5><ol><li>提高查询效率</li><li>减少对数据表的排序操作</li><li>随机IO查询变顺序IO查询</li></ol><h5 id="劣势">劣势</h5><ol><li>实际上索引也是一张表，包含主键和索引字段，并指向实体表的记录，索引列也是要占用空间的</li><li>虽然索引提高了查询速度，但是会降低更新表的速度</li><li>索引只是提高效率的一个因素，建立索引也要花费时间</li></ol><h5 id="什么时候需要创建索引">什么时候需要创建索引</h5><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系创建索引</li><li>单键/组合索引的选择问题：在高并发下倾向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计和分组字段（group by）</li></ol><h5 id="哪些情况不要创建索引">哪些情况不要创建索引</h5><ol><li>频繁更新的字段不适合创建索引</li><li>where条件里用不到的字段不创建索引</li><li>表记录太少，如果才几万条数据，不需要创建索引</li></ol>]]></content>
    
    
    <summary type="html">mysql面试题</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux面试</title>
    <link href="https://rubyrose-tat.github.io/2023/03/20/Linux%E9%9D%A2%E8%AF%95/"/>
    <id>https://rubyrose-tat.github.io/2023/03/20/Linux%E9%9D%A2%E8%AF%95/</id>
    <published>2023-03-20T11:00:00.000Z</published>
    <updated>2023-03-20T15:07:40.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="常用高级命令">常用高级命令</h2><h5 id="查看进程">查看进程</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">ps -ef / ps -aux<br><span class="hljs-deletion">-a 显示所有用户的进程</span><br><span class="hljs-deletion">-u 显示用户名和启动时间</span><br><span class="hljs-deletion">-x 显示所有进程，包括没有控制终端的进程</span><br><span class="hljs-deletion">-e 显示所有进程，包括没有控制终端的进程，较x选项，信息更为简略</span><br><span class="hljs-deletion">-l 显示进程详细信息，按长格式显示</span><br></code></pre></td></tr></table></figure><h5 id="查看端口号">查看端口号</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">natstat -anp<br><span class="hljs-deletion">-a 显示所有</span><br><span class="hljs-deletion">-n 只用数字显示，不用别名</span><br><span class="hljs-deletion">-p 显示进程号和进程名</span><br></code></pre></td></tr></table></figure><h5 id="查看磁盘使用情况">查看磁盘使用情况</h5><p><code>df -h</code></p><h5 id="查看某个进程内存">查看某个进程内存</h5><p><code>jmap -heap</code></p><h2 id="shell">shell</h2><h5 id="awk">awk</h5><h5 id="sed">sed</h5><h5 id="sort">sort</h5><h5 id="cut">cut</h5><h5 id="启停脚本">启停脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> hadoop1 hadoop2 hadoop3<br><span class="hljs-keyword">do</span> <br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;绝对路径&quot;</span><br><span class="hljs-keyword">done</span><br>;;<br><span class="hljs-string">&quot;stop&quot;</span>)<br><br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h5 id="引号">引号</h5><p>‘’ 不解析里面变量的值</p><p>“” 解析里面变量的值</p><p>嵌套：看谁在最外面</p>]]></content>
    
    
    <summary type="html">Linux面试知识</summary>
    
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://rubyrose-tat.github.io/tags/Linux/"/>
    
    <category term="面试" scheme="https://rubyrose-tat.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
</feed>
