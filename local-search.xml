<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>行测</title>
    <link href="/2023/03/28/%E8%A1%8C%E6%B5%8B/"/>
    <url>/2023/03/28/%E8%A1%8C%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="资料分析">资料分析</h2><p><a href="https://www.bilibili.com/video/BV1f4411C7z5/?p=1&amp;vd_source=b6a7ebaee1a6ae412ff74468ffa1f989">视频-刘文超</a></p><h3 id="统计术语">统计术语</h3><h5 id="基期、现期">基期、现期</h5><p>作为对比参照的时期称为<strong>基期</strong>，而相对于基期的称为<strong>现期</strong></p><p>例：今年比去年营收增加100万（今年是现期，去年是基期）</p><h5 id="增长率">增长率</h5><p>指增长量与基期量的相对变化，即在基期量的基础上增长了多大的幅度</p><p>增长率又称增幅、增速、增长幅度、增长速度等<br>$$<br>\text { 增长率 }=\frac{\text { 增长量 }}{\text { 基期量 }}=\frac{\text { 现期量 }- \text { 基期量 }}{\text { 基期量 }}=\frac{\text { 现期量 }}{\text { 基期量 }}-1<br>$$</p><h5 id="年均增长率">年均增长率</h5><p>$$<br>\text { 现期量 }=\text { 基期量 } \times(1+\text {年均增长率 })^{n} \text { ，其中 } \mathrm{n} \text { 为相差年份 }<br>$$</p><h5 id="同比、环比">同比、环比</h5><p>同比：与历史周期相比较</p><p>环比：现在统计周期和上一个统计周期相比较</p><p>例：2019年9月同比：2018年9月环比：2019年8月</p><h5 id="比重">比重</h5><p>指某部分在总体中所占的百分比，一般是百分数的形式</p><h5 id="顺差、逆差">顺差、逆差</h5><p>顺差 = 出口 - 进口</p><p>逆差 = 进口 - 出口</p><h5 id="国内生产总值：GDP">国内生产总值：GDP</h5><p>GDP = 第一产业<strong>增加值</strong> + 第二产业<strong>增加值</strong> + 第三产业<strong>增加值</strong></p><h3 id="速算技巧">速算技巧</h3><h5 id="估算原则">估算原则</h5><p>1.首位均不同，保留两位；首位有相同，保留三位</p><p>2.选项之间误差在10%以上，保留两位；选项之间误差在10%以内，保留三位</p><p>保留三位最大误差千分之五；保留两位最大误差百分之五</p><h5 id="特殊分数">特殊分数</h5><p>$$<br>\frac{1}{6}=16.7 % &amp; \frac{1}{7}=14.3 % \<br>\frac{1}{8}=12.5 % &amp; \frac{1}{9}=11.1 % \<br>$$</p><p>$$<br>\begin{array}{ll}<br>\frac{1}{11}=9.1 % &amp; \frac{1}{12}=8.3 % \<br>\frac{1}{13}=7.7 % &amp; \frac{1}{14}=7.1 % \<br>\frac{1}{15}=6.7 % &amp; \frac{1}{16}=6.25 % \<br>\frac{1}{17}=5.9 % &amp; \frac{1}{18}=5.6 % \<br>\frac{1}{19}=5.3 %<br>\end{array}<br>$$</p><h2 id="判断推理">判断推理</h2><h3 id="逻辑判断">逻辑判断</h3><h4 id="翻译推理">翻译推理</h4><h5 id="一、前推后-（如果-就-都）">一、前推后 （如果/就/都）</h5><p>如果··· 那么···</p><p>若··· 则···</p><p>只要··· 就···</p><p>为了··· 一定（必须）···</p><p>所有··· 都···</p><p>··· 是 ···的充分条件</p><p><strong>逆否等价</strong></p><p>A → B 等价于 -B → -A</p><h5 id="二、后推前">二、后推前</h5><p>只有··· 才···</p><p>不··· 不···</p><p>除非··· <strong>否则不</strong>···</p><p>···是 ···的基础/假设/前提/关键</p><p>···是 ···的必要/必不可少的条件（<strong>谁必不可少谁放在箭头后面</strong>）</p><h5 id="三、且和或">三、且和或</h5><p>A且B: 二者同时成立</p><p>A或B: 二者至少一个成立</p><p>要么A,要么B: 二者只有一个成立</p><p><strong>等价关联词</strong>：</p><p>且：和、既···又···、不仅···而且···、···但是···</p><p>或：或者···或者···、···和···至少一个</p><p>要么···要么···：···和···只有一个</p><p>“或”的翻译：否1→1 （“或”关系为真时，否定一项可以得到另一项为真）</p><p><strong>德摩根定律</strong></p><ol><li>-(A且B) = -A或-B</li><li>-(A或B) = -A且-B</li></ol>]]></content>
    
    
    <categories>
      
      <category>体制内考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>体制内考试</tag>
      
      <tag>行测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>结构化面试</title>
    <link href="/2023/03/28/%E9%9D%A2%E8%AF%95-%E7%BB%93%E6%9E%84%E5%8C%96%E9%9D%A2%E8%AF%95/"/>
    <url>/2023/03/28/%E9%9D%A2%E8%AF%95-%E7%BB%93%E6%9E%84%E5%8C%96%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="社会现象">社会现象</h2><h5 id="答题思路：表态-分析-对策">答题思路：<strong>表态-分析-对策</strong></h5><h5 id="1-看到别的县县长直播带货火了之后，某市就出台政策和文件要求也必须进行县长直播带货，并且进行排名通报。对于这个现象你怎么看？（2020年6月河南省考遴选）">1. 看到别的县县长直播带货火了之后，某市就出台政策和文件要求也必须进行县长直播带货，并且进行排名通报。对于这个现象你怎么看？（2020年6月河南省考遴选）</h5><p>​各位考官，我认为这种“抄作业”式学习直播带货的方式出发点是好的，但并不合理，排名通报更是形式主义作祟，而这种不合理的工作要求在基层依旧屡禁不绝。<br>​<em>明文规定必须县长直播带货，而且还要排名通报的不合理处体现在：</em><br>​**一是可行性差，难以有效落实。**直播带货是基层政府在互联网新经济时代主动作为的创新之举，但并不具有普适性，带货带货得有货可带，像对于以重工业为主的地区操作性和可行性不高。<br>​**二是实际效果难达预期，甚至可能滋生弄虚作假和形式主义。**直播带货的火爆需要以优质的商品为基础，吸睛的形式为载体，甚至还有一定的偶发性。简单的复制粘贴和赶鸭子上架式的硬搞难以取得良好的实际效果。而且排名通报更是导致基层难以招架，甚至激发不满情绪，弄虚作假，带坏风气。<br>​<em>而这样“拍脑袋”决策的出现的原因：</em><br>​**一是地方政府决策者违背了实事求是的原则。**生搬硬套别人的做法，缺少结合自身实际的思考和改进，制定措施不切实际，设定目标好高骛远，不遵守事物发展的客观规律。<br>​**二是制度出台缺少监督约束机制。**地方政府对于制定的决策部署缺乏强有力的评价、论证、监督制约等机制，缺乏相应的考核管理办法，惩处机制落实不到位，让决策者有了随意决策的空间。<br>​<em>要让决策更接地气、更有实效，我认为应当做到三方面：</em><br>​**一是坚持实事求是。**制定措施要根据地区实际因地制宜，要在别人好做法的基础上走出适合自己的路子，在具体的指导过程中强调重点、突出亮点，设定目标要根据地区不同体现差异性，建立容错机制，鼓励“跳起来摘桃子”，也允许第一次摘不到桃子，不轻易以排名衡量工作成绩。<br>​**二是学会问计于民。**要广泛征求各方意见，关注群众的利益和诉求，能在田间地头和百姓炕头听群众的家常话和牢骚话，真正把基层的声音听足、听透了，那么决策才会更有针对性和实效性。<br>​**三是强化制度规范。**充分发挥纪检监察作用，注重基层端的反映，对于违反集体议事制度、拍脑袋决策、拍屁股走人等行为严肃追责问责，倒逼谨慎用权，让权力在制度框架内行使，更好地为人民群众服务。<br>​我的回答完毕，谢谢各位考官。</p><h5 id="2-目前互联网上兴起了医疗众筹，短时间内就可以筹集到大量的“救命钱”。同时也有人认为其中掺杂不少虚假信息，出现过诈骗案例。对此你怎么看？（2018年6月广东省考）">2. 目前互联网上兴起了医疗众筹，短时间内就可以筹集到大量的“救命钱”。同时也有人认为其中掺杂不少虚假信息，出现过诈骗案例。对此你怎么看？（2018年6月广东省考）</h5><p>​各位考官，在我看来，医疗众筹利大于弊，值得完善和推广。因为它的确有很多积极的社会效益。<br>​**一是提供了社会力量参与大病救治的渠道。**虽然我们国家的医保的覆盖率和服务水平明显持续提升。但是在重大疾病和突发灾祸面前，高额的医疗费用让患者家属还是难以承受，医疗众筹的出现确实帮助了很多身处水火中的家庭，一定程度上解决了因病致贫、因病返贫的问题。<br>​**二是营造了关注公益、互帮互助的社会风尚。**医疗众筹所体现出的互助精神与社会主义核心价值观中的和谐和友善高度契合，是精神文明建设的生动实践体现。<br>​<strong>但是，我们也要客观的认识到，随着医疗众筹的兴起，出现了不少诈捐骗捐、信息泄露的事件，这样会极大的伤害爱心人士的情感，透支社会公众的爱心，损害医疗众筹的公信力。</strong><br>​为了让这种医疗互助模式可以健康规范发展，我们还有许多工作要做。<br>​**一是建章立制、严厉打击。**政府部门要发挥出引导作用，针对医疗众筹各个环节可能存在的风险点明确要求、细化规则，在众筹平台的准入资质、捐款账户的安全监管、募集资金的监管等规范管理。要求各大医疗机构在信息核验中负起应有责任，提升运行的专业性和规范性。加大对如“诈捐”等行为的打击力度，及时将不法分子绳之以法，维护广大爱心人士的合法权益。<br>​**二是优化程序、严格审核。**网络平台要完善自身平台功能设计，在众筹申请的病历证明、用款规模、用款凭证、以及当事人自身的经济状况等方面进行全面有效审核，同时提高众筹申请的难度，及时公布捐款明细和使用情况，进一步提升透明度和公开性。<br>​**三是加强宣传、积极引导。**通过三微一端、车载广播等方式及时公布官方认可的众筹平台和众筹条件，在医院、银行、火车站等人员密集场所通过动画和短视频等形式宣传利用众筹平台违法乱纪案件和甄别众筹信息的方式，引导广大群众正确参与、运用众筹平台。</p><hr><h2 id="态度观点">态度观点</h2><h5 id="答题思路：表态-分析-对策-2">答题思路：<strong>表态-分析-对策</strong></h5><h5 id="分析">分析</h5><p>主体分析：公民，党员，企业 等需要具备···</p><p>策论分析：需要做什么···，才能体现/达到···</p><p>内容拓展：</p><ol><li>道理论证：只有···才； 如果···就···； 除非···否则···；</li><li>举例论证：扣合主题、明确结果</li><li>引用论证：领导讲话、古语古训</li></ol><h5 id="对策">对策</h5><ol><li>政府对策：同社会现象</li><li>个人启示：思想+行动、学习+实践、学习+工作+生活</li></ol><h5 id="公务员工作对于实现人生价值的意义">公务员工作对于实现人生价值的意义</h5><ol><li>提供物质保障</li><li>提供精神动力</li><li>提供成长平台</li><li>提供发挥舞台</li></ol><h5 id="习总书记说过“我将无我，不负人民”，请结合实际情况谈谈你的理解">习总书记说过“我将无我，不负人民”，请结合实际情况谈谈你的理解</h5><hr><h2 id="组织管理">组织管理</h2><h2 id="应急应变">应急应变</h2><h2 id="人际关系">人际关系</h2><p>人际关系总原则：工作为重，单位为重</p><p>对待领导的原则：尊重，服从，请示</p><p>对待同事的原则：尊重，关心，团结</p><p>对待群众的原则：热情、耐心，服务群众，为群众着想、着眼于群众利益</p><p>对待亲友的原则：情理兼顾，坚守原则</p><p>对待自己的原则：时刻反思，见贤思齐，见不贤而自省</p>]]></content>
    
    
    <categories>
      
      <category>体制内考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript</title>
    <link href="/2023/03/26/JavaScript/"/>
    <url>/2023/03/26/JavaScript/</url>
    
    <content type="html"><![CDATA[<h2 id="JavaScript介绍">JavaScript介绍</h2><h4 id="解释型">解释型</h4><p>JavaScript是一门解释型编程语言，解释型编程语言指代码不需要手动编译，而是通过解释器边编译边执行。所以要运行JS，我们必须现在计算机中安装JS的解释器。像是我们使用的浏览器都已经自动集成了JS的解释器（我们也称它是JS引擎）。Node.JS也是JS引擎，它使得JS可以直接在服务器中运行。无论是浏览器还是Node.js都需要遵循ECMAScript（ES）标准。</p><h4 id="函数式编程">函数式编程</h4><p>在JavaScript中函数是一等公民，它可以像其他类型的值一样赋值给任意变量，也可以作为参数传递给其他函数。所以在JS中函数是非常非常重要，通过函数式编程可以编写出功能强大又灵活的代码。</p><h4 id="单线程">单线程</h4><p>JavaScript是一个单线程的编程语言。简言之，JS同一时间只能做一件事，一件事完成才会继续做另一件事。单线程降低了JS代码的复杂度，也在某些场景下使得JS性能变差，所以JS又为我们提供了异步的编程方式，以提高代码的运行速度。</p><h4 id="面向对象">面向对象</h4><p>几乎所有的现代的编程语言都是面向对象的编程语言，JS也不例外。所谓的面向对象，指将一组相关的功能（数据）统一封装到一个对象中，使用功能时无需考虑其实现的细节，直接找到对应的对象即可完成功能的调用。</p><h4 id="扩展ES">扩展ES</h4><p>ES全称EcmaScript,是脚本语言的规范，而平时经常编写的JavaScript,是EcmaScript的一种实现，所有ES新特性其实指的就是JavaScript的新特性。</p><p>ECMAScript只是为我们定义最基本的语法，像是数据类型（原始值、对象）、运算符、流程控制语句等内容。为了使JS可以适用于不同的场景，在不同的JS解释器中还为我们提供了不同的扩展以增强其功能。像是浏览器中的DOM、BOM使得我们可以通过JS操作网页和浏览器。NodeJS中的fs模块可以使我们直接操作计算机系统中的各种文件。所以我们学习JS时，除了要学习ES标准以外，还要学习它的各种扩展，才能在不同的环境中发挥出JS的最大威力。</p><h2 id="JavaScript语法">JavaScript语法</h2><h4 id="基本语法">基本语法</h4><ol><li><p>JS严格区分<strong>大小写</strong></p></li><li><p>在JS中多个空格和换行会被忽略</p></li><li><p>JS中每条语句都应该以<strong>分号</strong><code>;</code>结尾</p><p>JS中具有自动添加分号的机制，所有如果不写分号，解释器会自动添加</p></li></ol><h4 id="字面量和变量">字面量和变量</h4><h5 id="字面量">字面量</h5><p>其实就是一个值，它所表示的含义就是它字面的意思</p><p>比如：数字、“hello”、true、null …</p><p>在js中所有的字面量都可以直接使用，但是直接使用字面量并不方便</p><h5 id="变量">变量</h5><p>可以用来“存储”字面量，并且变量中存储的字面量可以随意修改</p><h6 id="变量的使用">变量的使用</h6><p>声明变量 --&gt; let 变量名 （var 旧方式）</p><p>变量赋值 --&gt; a = true / ‘hello’</p><p>声明和赋值同时进行</p><h4 id="变量的内存结构">变量的内存结构</h4><p>变量中并不存储任何值，而是存储值的内存地址！</p><h4 id="常量">常量</h4><p>在js中，使用**<code>const</code>**声明常量，常量只能赋值一次，重复赋值会报错</p><p>除了常规的常量外，有一些对象类型的数据也会声明为常量</p><h4 id="标识符">标识符</h4><p>在js中，所有可以由我们自主命名的内容，都可以认为是一个标识符</p><p>​像 变量名、函数名、类名 …</p><p>使用标识符需要遵循如下的命令规范：</p><ol><li><p>标识符只能含有字母、数字、下划线、$ ，且不能以数字开头</p></li><li><p>标识符不能是js中的关键字和保留字，也不建议使用内置的函数或类名作为变量名</p></li><li><p>命名规范：</p><ul><li><p>通常使用驼峰命名法–首字母小写，每个单词开头大写</p></li><li><p>类名使用大驼峰命名法–首字母大写，每个单词开头大写</p></li><li><p>常量的字母全部大写，单词间使用下划线分隔</p></li></ul></li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>申论作文</title>
    <link href="/2023/03/24/%E7%94%B3%E8%AE%BA%E4%BD%9C%E6%96%87/"/>
    <url>/2023/03/24/%E7%94%B3%E8%AE%BA%E4%BD%9C%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h2 id="题目汇总">题目汇总</h2><h4 id="普通型">普通型</h4><ul><li>为······发展&quot;铺路垫石&quot; ，如为人才企业发展“铺路垫石”</li><li>让······的故事讲不完， 如让小企业蓬勃发展的故事讲不完</li><li>描绘······的好风景； 共绘······画卷； 拥抱······的大机遇；</li><li>为······注入新动力； 擘画······新蓝图； 擦亮······的名片；</li><li>推动······迈上新台阶； 让······成为必修课； 让······成为“标配”；</li></ul><h4 id="两者型">两者型</h4><ul><li>以······点燃······， 如以担当有为点燃“责任之心”</li><li>······描绘······新画卷， “三治融合”描绘基层社会治理新画卷</li><li>以······锻造······的“钥匙”， 如以设计锻造创新的“钥匙”</li><li>······为······添能加油， 如志愿服务为山乡巨变添能加油</li><li>为······插上······新翅膀； 用······敲开······大门；</li><li>······缔造······新动能； 以······为······保驾护航</li></ul><h4 id="辩证型">辩证型</h4><ul><li>实现······与······的“双丰收”， 实习拿来与输出的“双丰收”</li><li>善于做好······和······相结合文章； 让······和······良性互动；</li><li>让······和······相得益彰； 奏响······和······的协奏曲/合唱曲；</li><li>弹好······和······的二重奏； 唱好······和······的“二人转”；</li></ul><hr><h2 id="结构">结构</h2><h4 id="结构一">结构一</h4><p>题目： 让······成为主色调</p><p>分论点一：用好······画笔，来增强······的“本色”；</p><p>分论点二：用好······画笔，来增强······的“成色”；</p><p>分论点三：用好······画笔，来增强······的“亮色”；</p><p>分论点四：用好······画笔，来增强······的“底色”；</p><h4 id="结构二">结构二</h4><p>题目： 下好······先手棋</p><p>分论点一：落好······棋子，为······“加油”；</p><p>分论点二：落好······棋子，为······“添柴”；</p><p>分论点三：落好······棋子，为······“蓄能”；</p><p>分论点四：落好······棋子，为······“点睛”；</p><h4 id="结构三">结构三</h4><p>坚持党建为魂，增强农村基层党组织战斗力。</p><p>坚持自治为基，激发农村基层治理内生力。</p><p>坚持法治为本，提升农村基层治理硬实力。</p><p>坚持德治为要，提升农村基层治理软实力。</p><h4 id="结构四">结构四</h4><p>题目： 打造······金字招牌</p><p>分论点一：打好······牌，为······添加“动力源”；</p><p>分论点二：打好······拳，为······打造“黄金台”；（画上“休止符”）</p><p>分论点三：下好······棋，为······加上“催化剂”；</p><h4 id="结构组合">结构组合</h4><h5 id="前一部分">前一部分</h5><p>打好大局牌，打好感情牌，打好优势牌，打好机制牌，打好服务牌，打好公益牌，打好组合拳，打好精准牌，下好先手棋，练好基本功，立好军令状，弹好多重奏，打好主动仗，管好责任田，签好责任书，唱好主角戏，唱好重头戏，画好同心圆，当好笔杆子，当好小郎中，当好领头雁，用好指挥棒，用好传家宝，答好赶考卷，打造好作品，传播好声音，展示好形象，建好大格局，奏好主题曲，唱好好声音，当好监控官，打好铁算盘，念好目常经，画好工笔画，用好救命钱，当好情报兵，当好侦察兵，当好尖刀兵，当好勤务兵</p><p>练就宽肩膀，提升真本领，争当主攻手，细耕责任田，搭建产业链，牵住牛鼻子，形成聚能环，擦成强拳头，激活一池水，唱响主旋律，扭住牛鼻子，筑牢基础桩，汇聚正能量，铸成多面手，常怀赶考心，凝聚正能量，做对运算符，用足工具箱，出准杀手铜，立下愚公志，形成合围势，打赢终极战，擦亮精准牌，构建滴灌网，引入动力源，提升精气神，增强精气神，争当领头雁，明确风向标，弘扬主旋律，传播正能量，守住警戒线，提升组织力，打造软环境，串起旅游线，搬迁断穷根，共织小网络，畅通中梗阻，防止软落实，搭建大平台，筑牢安全线，唱响共赢曲，锻造硬作风，守住保障线，按下退格键，按下回车键，按下快捷键</p><h5 id="后一部分">后一部分</h5><p>铺路子、压担子、铁脚板、搭好台、演好角、唱好戏、主心骨、方问盘、经风雨、见世面、壮筋骨、催化剂、润滑剂、助燃剂、冷却剂、黄金台、招才局、提质、增效、点晴、添彩、增色、服务台、动力源、金钥匙、护身符、拦路虎、绊脚石、神经末梢、烫手山莘、热锅蚂蚁、牛鼻子、朋友圈、领头雁、冷板凳、孺子牛、螺丝钉、安全网、保障网、一盘棋、暂停键、休止符、玻璃门、旋转门、铺路石、方向盘等、痛点、堵点、难点、强引擎、最强音、压舱石、稳定器、浇水、施肥、修剪、光照、快车道</p><hr><h2 id="一般型框架">一般型框架</h2><p>注：在题目、论点（总、分）表述中，要把<strong>核心立意</strong>写上</p><h3 id="第一段：大框架概述，-因此，引出总论点">第一段：大框架概述，+因此，引出总论点</h3><h5 id="实例一：重点讲意义">实例一：重点讲意义</h5><p>大力推广消费扶贫，是实现贫困人口脱贫的重要抓手，是带动品质消费的关键一招。它既能让农民感受到自己劳动的价值，又能让消费者感受到有品质的消费。因此，为让消费扶贫持续作用于脱贫攻坚“征途”中，我们应着力布局推动消费扶贫进一步走深走实，展现发展新高度。</p><h5 id="实例二：通过政策、讲话来引出总论点">实例二：通过政策、讲话来引出总论点</h5><p>2018年年末，国务院办公厅发布《关于深入开展消费扶贫助力打赢脱贫攻坚战的指导意见》，将消费扶贫纳入扶贫攻坚政策体系。这为有效开展消费扶贫工作明确了方向，提出了要求，指明了道路。因此，我们应谋篇布局推动消费扶贫走深走实，将好政策落到实处，让消费扶贫持续作用于脱贫攻坚征程中。</p><h5 id="实例三：重点讲背景、概况">实例三：重点讲背景、概况</h5><p>当下，脱贫攻坚工作即将迎来收官之战。不断提高贫困群众的幸福感、获得感，提升贫困群众的生活质量成为了我们肩头上的重要“担子”。这时候，我们不能有“歇脚喘气”的想法，应该着力布局推动脱贫攻坚工作迈向高质量发展行列。而消费扶贫就是一个很好的切入点。因此，为了让贫困群众早日过上好日子，为了让脱贫攻坚工作高质量发展，我们要下好“消费扶贫”的先手棋。</p><h5 id="实例四：重点讲含义">实例四：重点讲含义</h5><p>消费扶贫就是让消费者去购买贫困地区的特色产品，进而带动贫困地区实现脱贫目标的一种方法手段。可以讲，消费扶贫既可以让消费者获得优质的产品、享受到有品质的消费体验，也可以为贫困地区脱贫按下下“快进键”。因此，我们要下好消费扶贫的先手棋，让消费者消费的开心，让贫困群众也更有获得感。</p><h3 id="第二段：问题-成绩-问题-成绩">第二段：问题/成绩/问题+成绩</h3><h4 id="结构中的问题表达">结构中的问题表达</h4><p>但也要清醒地认识到，追求······的长征路上还存在几处“雪山”“草地”，如······。这些都值得我们注意。<br>我们也要看到，在追求······上，存在一些“拦路虎”、“绊脚石”，他们是我们实现······的“天花板”，如······。这些都值得我们警惕。</p><h4 id="结构中的成绩表达">结构中的成绩表达</h4><p>我们可以看到，我们在描绘······的画卷中，已经取得了一些成绩，他们是我们的点晴之笔，如······。但我们不应止步于此，要持续地“输氧供血”，确保得出······的“最大公约数”，画好······的“最大同心圆”。</p><h3 id="第三段：-重审总论点，描述三个分论点">第三段： 重审总论点，描述三个分论点</h3><p>因此，为了让······，我们必须要发扬······精神。这关键要打好三套牌。</p><h3 id="内容">内容</h3><p><strong>尽量从材料里找例子</strong></p><p>（大作文题目那句话所在的材料-小题没有用到的材料-全篇材料）注：找分论点亦是如此！<br>有定义含义，我们要拿来写上；有讲话政策，我们要贯彻实施；<br>有经验效果，我们要学习应用；有失败教训，我们要想法避免；<br>有形势背景，我们要抓紧布局；有对策想法，我们要结尾写上。</p><p>论述的时候从“是什么-为什么-怎么办”来切入！</p><p>每个分论点通常从（背景）是什么，意义是什么，危害是什么，有哪些例子可以佐证这一点等，然后，<strong>因此</strong>+对此结尾</p><h3 id="结尾">结尾</h3><ol><li>总而言之，做好······（总论点），是时代给我们出的联考题，我们一定要写好······（论点一）的填空题，答好······（论点二）的判断题，做好······（论点三）的简答题以及其他问答题（论点四），作为“答题人”，只要我们坚持以······为笔，必将收获······的“高分答卷”，赢得······的“五星好评”和“点赞”。</li><li>时代是出题人，我们是答卷人，人民是阅卷人。提供一个······的新样本，唱响属于新时代的“春天的故事”，回答好新时代的答卷，赢得人民的“好评”。</li><li>干好······，容不得我们“歇脚喘气打盹”，我们要打起十分的精神，我们一定要不辜负······，唱响属于我们的时代乐章。</li></ol><h2 id="辩证型框架">辩证型框架</h2><p><strong>第一段：大框架概述，+因此，做好C，需要平衡A和B的关系</strong></p><h5 id="示例一：">示例一：</h5><p>信用既是一种道德品质，也是一种制度规则（这句话A+B，任何的辩证大作文都要写上）。建设诚实守信的和谐社会，我们既要重视信用的教育引导，让信用成为人们心中的道德标准（做法+效果）；也要健全信用的规则制度，对失信行为形成约束（做法）。这样子，诚实守信将继续成为我们的民族特色，还将焕发出永不褪色的时代价值（最终的价值和意义）。因此，从这个意义上讲，我们在建设信用社会、涵养社会信用底色时，应让道德品质和制度规则良性互动，互相补充，双轮驱动，共同发力（总论点）。</p><h5 id="示例二：">示例二：</h5><p>在人生的旅途上，既有“繁”，也有“简”。“繁”指的是人生路上的繁琐事、繁复事，它们是我们生活中增光添彩的生花妙笔（含义、是什么）。“简”指的是人生路上的简单事、简要事，它们是我们生活中画龙点睛的关键一笔（含义、是什么）。因此，在人生的路上，我们要处理好、统筹好“繁”与“间”的关系，架起“繁”与“简”的彩虹桥，让“繁”与“简”和合共美，共同推动人生出彩（总论点）。</p><p><strong>其他段落的论述与普通型议论文基本类似</strong></p><p>第二段：A是C的基础，对于B具有前提作用（重点讲A的意义好处）</p><p>第三段：B是C的保障，对于A具有重要价值（重点讲B的意义好处）</p><p>第四段：做好C，需要兼顾A和B的关系，不可有失偏颇。如果只重视A，而忽视B，会怎么样；如果只重视B，而忽视A，会怎么样。（重点讲问题、危害）</p><p>第五段：因此，做好C，我们一方面要做好A+对策；另一方面，也要做好B+对策</p><p>第六段：当我们平衡好A和B，那肯定能做好C</p><hr><h2 id="素材积累">素材积累</h2><h3 id="好词好句">好词好句</h3><p>固化于制，内化于心，外化于行</p><h3 id="原理效应">原理效应</h3><h4 id="一、蝴蝶效应">一、蝴蝶效应</h4><p>美国气象学家爱德华・罗伦兹提到：“一只南美洲亚马孙河流域热带雨林中的蝴蝶，偶尔扇动几下翅膀，可以在两周以后引起美国德克萨斯州的一场龙卷风。”其原因就是蝴蝶扇动翅膀的运动，导致其身边的空气系统发生变化，并产生微弱的气流，而微弱气流的产生又会引起四周空气或其他系统产生相应的变化，由此引起一个连锁反应，最终导致其他系统的极大变化。</p><p>启示：初始条件十分微小的变化经过不断放大，对其未来状态会造成极其巨大的影响。有些小事可以糊涂，有些小事如经系统放大，则对一个组织、一个国家来说是很重要的，这时就不能糊涂。在日常的工作和生活中，我们要时刻保持细心谨慎的态度，做到防微杜渐、居安思危。</p><h3 id="二、鲶鱼效应">二、鲶鱼效应</h3><p>挪威人喜欢吃沙丁鱼，尤其是活鱼。市场上活鱼的价格要比死鱼高许多，所以渔民总是千方百计地想办法让沙丁鱼活着回到渔港。可是经过种种努力，绝大部分沙丁鱼还是在中途因窒息而死亡。但有一条渔船总能让大部分沙丁鱼活着回到渔港。船长严格保守着秘密，直到其去世,谜底才揭开。原来是船长在装满沙丁鱼的鱼槽里放进了一条以鱼为主要食物的酷鱼。酷鱼进入鱼槽后，由于环境陌生，便四处游动。沙丁鱼见了飨鱼十分紧张，左冲右突，四处躲避，加速游动。这样沙丁鱼缺氧的问题就迎刃而解了，它们也就不会死了，就能活蹦乱跳地回到渔港了。</p><p>启示：无论何时何地，都要时刻保持清醒的头脑，要有如临深渊、如履薄冰的生存意识，奋发进取，一往无前，否则就会被时代所淘汰。要时刻具有危机意识，不断加强学习，提升自我、完善自我，这样才会激发自身活力，不断创新，开创一片天地；反之，安而忘危，就会放松警惕，失去斗志，进而在激烈的社会竞争中被渐渐淘汰。</p><h4 id="三、马太效应">三、马太效应</h4><p>马太效应(MatthewEffect),是指好的愈好、坏的愈坏、多的愈多、少的愈少的一种现象，广泛应用于社会心理学、教育、金融以及科学等众多领域。名字来自于《圣经-马太福音》中的一句话：“凡有的，还要加给他叫他多余;没有的，连他所有的也要夺过来。”社会学家从中引申出了“马太效应”这一概念。</p><p>启示：任何个体、群体或地区，在某一个方面获得成功和进步，就会产生一种积累优势，就会有更多的机会，取得更大的成功和进步。通常情况下用以描述社会生活领域中普遍存在的两极分化现象。我们每个人都要发现并积极利用自身的优势，以获得更大的成功。</p><h4 id="四、“弼马瘟效应”">四、“弼马瘟效应”</h4><p>两千多年前，我国一些养马的人在马厩中养猴，以趋避马瘟。据有关专家分析，因为猴子天性好动，这样可以使一些神经质的马得到一定的训练，使马从易惊易怒的状态中解脱出来，对于突然出现的人或物以及声响等不再惊恐失措。马是可以站着消化和睡觉的，只有在疲惫和体力不支或生病时才卧倒休息。在马厩中养猴，可以使马经常站立而不卧倒，这样可以提高马对血吸虫病的抵抗能力。</p><p>启示：某种程度上说，企业组织类似于马群。而那些个性鲜明、我行我素，同时又能力超强、充满质疑和变革精神的员工，就是企业中的“弼马瘟”，他们的存在，有助于增强员工的活力，避免疲沓和懈怠，进而有利于整个组织活力的增进。因此，在团队中有个性十足、充满活力的人，容易使团队更有效率。</p><h4 id="五、青蛙效应">五、青蛙效应</h4><p>青蛙效应是指把一只青蛙扔进开水里，它因感受到巨大的痛苦便会用力一蹬，跃出水面，从而获得生存的机会。当把一只青蛙放在一盆温水里并逐渐加热时，由于青蛙已慢慢适应了那惬意的水温，所以当温度升高到一定程度时，青蛙便再也没有力量跃出水面了。于是,它便在舒适之中被烫死了。</p><p>启示：“生于忧患，死于安乐。&quot;人天生就是有惰性的，总愿意安于现状，不到迫不得已多半不愿意去改变已有的生活。若一个人长久沉迷于这种无变化、安逸的生活时，就往往忽略了周围环境的变化，当危机到来时就像那只青蛙一样只能坐以待毙。</p><h4 id="六、刺猬法则">六、刺猬法则</h4><p>两只困倦的刺猬，由于寒冷而拥在一起。可因为各自身上都长着刺，于是它们离开了一段距离，但又冷得受不了，于是又凑到一起。几经折腾，两只刺猬终于找到了一个合适的距离，既能互相获得对方的温暖，而又不至于被扎。</p><p>启示：它强调的是人际交往中的“心理距离效应”。在实际人与人的交往过程中，双方之间要保持适当的心理距离，要做到&quot;亲密而有间&quot;，这样既可以做到互相尊重，又不至于因太过亲密而丧失原则。</p><h4 id="七、破窗效应">七、破窗效应</h4><p>一座房子如果窗户破了，没有人去修补，用不了多久，其他的窗户也会莫名其妙地被人打破；一面墙如果出现一些涂鸦，没有及时被清洗掉，很快的，墙上就会布满乱七八糟、不堪入目的东西；一个很干净的地方，人们不好意思丢垃圾，但是一旦地上有垃圾出现之后，人们就会毫不犹疑地乱扔垃圾，丝毫不觉得羞愧。</p><p>启示：任何一种不良现象的存在，都在传递着一种信息，这种信息会导致不良现象的无限扩展，因此必须高度警觉那些看似偶然的、个别的、轻微的&quot;过错&quot;，如果对这种行为不闻不问、熟视无睹、反应迟钝或纠正不力，就会纵容更多的人“打烂更多的窗户玻璃”，就极有可能演变成“千里之堤，溃于蚁穴”的恶果。我们不能做第N个打破窗户的人，而要努力做修复“第一扇窗户”的人。</p><h4 id="八、从众效应">八、从众效应</h4><p>“从众效应”亦称“乐队花车效应”，是指当个体受到群体的影响（引导或施加的压力）时,就会怀疑并改变自己的观点、判断和行为，朝着与群体大多数人一致的方向变化。也就是指个体受到群体的影响而怀疑、改变自己的观点、判断和行为等，以和他人保持一致。</p><p>启示：“从众效应”即通常人们所说的“随大流&quot;。一般情况下，多数人的意见往往是对的。少数服从多数，一般是不错的。但缺乏分析，不进行独立思考，不顾是非曲直，一概服从多数，随大流走，则是不可取的，是消极的“盲目从众心理&quot;。</p><h4 id="九、森林效应">九、森林效应</h4><p>一棵树如果孤零零地生长于荒郊，即使成活也多半是枯矮畸形;如果生长于森林中，则枝枝争抢水露，棵棵竞取阳光，以致参天耸立、郁郁葱葱。管理专家们将此现象称之为“森林效应”。</p><p>启示：个人是在集体中通过与人交往、与人竞争而成长的，集体的要求、活动、舆论评价和成员素质等都对个人成长具有举足轻重的作用。良好的集体往往造就心智健康的人，不良的集体往往造就心智不健康的人。当今社会，竞争愈加激烈，我们只有在集体中经历竞争、淘汰、相互的比较和相互之间的评价，才有助于个人的发展，进而立于不败之地。</p><h4 id="十、阿伦森效应">十、阿伦森效应</h4><p>随着奖励减少而导致态度逐渐消极，随着奖励增加而导致态度逐渐积极的心理现象，在社会心理学中被称为“阿伦森效应”。它也指人们最喜欢那些对自己的喜欢、奖励、赞扬不断增加的人或物，最不喜欢那些显得不断减少的人或物。</p><p>启示:在日常工作与生活中，应该尽力避免由于自己的表现不当所造成的他人对自己印象不良方向的逆转。同样，它也提醒我们在形成对别人的印象过程中，要避免受其影响而形成错误的态度。</p><h4 id="十一、手表定律">十一、手表定律</h4><p>一个人有一只表时，可以知道现在是几点钟，而当他同时拥有两只时却无法确定。两只表并不能告诉一个人更准确的时间，反而会使看表的人失去对准确时间的把握。</p><p>启示：对于任何一件事情，不能同时设置两个不同的目标，否则将使人们无所适从；对于一个人，不能同时选择两种不同的价值观，否则他的行为将陷于混乱。一个人不能由两个以上的人来指挥，否则将使这个人无所适从；而对于一个企业，更是不能同时采用两种不同的管理方法，否则将使这个企业无法发展。在平时的工作中，我们一定要注意加强上下级之间、同级之间的沟通，以防由于信息模糊导致的不确定使得在命令执行过程中无所适从，不能保证政令畅通。</p><h4 id="十二、华盛顿合作定律">十二、华盛顿合作定律</h4><p>华盛顿合作定律说的是:一个人敷衍了事，两个人互相推诿，三个人则永无事成之日。这多少有点类似于我们的“三个和尚&quot;的故事。人与人的合作，不是人力简单相加，而要复杂和微妙得多。在这种合作中，假定每个人的能力都为1,那么，10个人合作结果有时比10大得多，有时甚至比1还小。因为人不是静止物，更像方向各异的能量，相互推动时，自然事半功倍，相互抵触时，则一事无成。</p><p>启示：团队一定要有协作精神。作为一名团队成员，我们要积极参与团队的沟通和协调，相互分工合作，共同取得成果。“人心齐，泰山移&quot;“众人拾柴火焰高”“团结就是力量”，讲的就是团结，我们应该本着大事讲原则、小事讲风格的态度去对待同事，把工作放在第一位，积极化解矛盾,维护团队形象，保持团队和谐。</p><h4 id="十三、水桶定律（木桶效应）">十三、水桶定律（木桶效应）</h4><p>“水桶定律”的核心内容为：一只水桶盛水的多少，并不取决于桶壁上最高的那块木板，而恰恰取决于桶壁上最短的那块。根据这一核心内容，“水桶理论”还有两个推论:其一，只有桶壁上的所有木板都足够高，水桶才能盛满水；其二，只要这个水桶里有一块不够高度的木板，水桶里的水就不可能是满的。</p><p>启示：任何一个组织，可能面临的一个共同问题，即构成组织的各个部分往往是优劣不齐的，而劣势部分往往决定整个组织的水平。我们每个人也都会有一些缺点，致使自身在生活和工作中出现失误。这些缺点就是我们的“短板”，因为它们的存在，制约了个人才能的发挥。所以，我们不能被缺点牵着鼻子走，而要主动将“短板”加长，将缺点纠正过来。</p>]]></content>
    
    
    <categories>
      
      <category>体制内考试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>申论</tag>
      
      <tag>体制内考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面试常见问题</title>
    <link href="/2023/03/21/%E9%9D%A2%E8%AF%95-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <url>/2023/03/21/%E9%9D%A2%E8%AF%95-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="人际关系">人际关系</h2><p>人际关系总原则：工作为重，单位为重</p><p>对待领导的原则：尊重，服从，请示</p><p>对待同事的原则：尊重，关心，团结</p><p>对待群众的原则：以群众为中心，急群众之所急</p><p>对待亲友的原则：情理兼顾，坚守原则</p><p>对待自己的原则：时刻反思，见贤思齐，见不贤而自省</p><h2 id="自我介绍：">自我介绍：</h2><p>面试官您好!我来自江西师范大学,是一名软件工程专业大数据技术方向的应届毕业生，非常荣幸能够参加这次面试。</p><p>我在本科期间学习成绩优异，专业排名前30%，获得过校综合素质奖学金。同时也积极参加各类竞赛，其中在蓝桥杯程序设计大赛江西赛区获得了省级二等奖。</p><p>我在大学期间带领团队完成了两个大数据相关的项目。我作为项目组长协调各个成员的工作和进度，同时也亲自参与数据分析和数据可视化的工作。在项目中，我注重与团队成员之间的沟通与协作，合理分配任务，让项目能够高效地推进。通过这些项目经验，我不仅对大数据的各种框架和原理有了更深入的理解和掌握，还锻炼了自己的团队沟通和组织协调能力。</p><p>我非常希望能够加入贵公司，在相关领域发挥我的专业知识和技能，为企业的信息化建设和发展做出贡献。我相信我专业知识和技能能够为公司带来价值，期待能够加入贵公司，也希望贵公司能给我提供广阔的一个学习和成长平台。谢谢！</p><h2 id="职业规划：">职业规划：</h2><p>在未来一到两年内，我希望自己能够踏踏实实地深耕本专业领域，更加深入学习专业相关知识，同时结合工作实践和业余学习，我会不断去钻研新技术同时写博客积累，并且学习团队管理等方面的能力。那两三年内，我希望自己能够承担更多责任，比如说带新人、带团队，我想把自己积累的经验和知识分享给大家，协助我们的团队不断发展与壮大。</p><h3 id="你的优势和不足，以及你以后在岗位上如何发挥作用">你的优势和不足，以及你以后在岗位上如何发挥作用</h3><p>我是一名软件工程专业的应届毕业生。我的优点是对于技术的热情和好奇心，能够持续学习和探索新的技术知识，并将其应用到实践中。我善于分析问题和解决问题，具有较强的逻辑思维能力和团队合作精神。同时，我注重细节，具有良好的代码编写规范和文档撰写能力。</p><p>我的不足之处在于经验不足，缺乏实践经验和项目经验，需要在实际工作中不断积累。同时，我还需要进一步提高自己的沟通能力和表达能力，以更好地与团队成员、上级和客户进行沟通和协作。在职场上，我也需要学习和适应职场规则和行为准则，养成良好的职业习惯和态度。</p><h3 id="你对加班的看法">你对加班的看法</h3><p>如果是工作需要我会义不容辞加班，我现在单身，没有任何家庭负担，可以全身心的投入工作。但同时，我也会提高工作效率，减少不必要的加班。</p><h3 id="好的工作态度"><strong>好的工作态度</strong></h3><p>良好的工作态度是以积极、负责和认真的态度对待工作，追求卓越，并持续学习和不断进步。我认为我具备良好的工作态度，例如，对待工作始终保持高度的责任心和热情，认真对待每一个任务并注重细节，与同事和领导保持良好的沟通和合作，此外我会结合工作经验和业余学习去不断学习新知识并提高自己的专业技能。</p><h3 id="客户提出不合理要求如何应对">客户提出不合理要求如何应对</h3><p>如果客户提出不合理的要求，我们应该冷静应对，我会首先尝试理解客户的需求和诉求，并耐心解释相关的原则和规定，告知客户为什么不能满足其要求。如果客户仍然坚持不合理的要求，我会与客户沟通，探讨其他可行的解决方案。如果仍然无法满足客户的要求，我会向上级领导汇报，并与团队成员讨论制定出相应的应对措施。最终，我会尽力保证客户的满意度和公司的利益，并保持良好的客户关系。</p><h3 id="目前拿到了几个offer">目前拿到了几个offer</h3><p>我现在确实有几份其它公司的offer，也在看其它公司的机会。但是经过今天和您的沟通以及对公司整体的了解，让我对咱们公司的印象非常好。无论是企业文化、管理方面还是工作氛围，都符合我对理想公司的预期。我非常希望能够得到这次机会。</p><p>作为一个初级求职者，我一直在寻找适合我的工作机会，贵公司是我非常看好的一家公司之一。我早早地投递了贵公司，并希望能够有机会加入其中。目前，我手头还没有其他的工作机会，因此我非常珍惜这次面试的机会，希望能够在面试中展现自己的能力，并深入了解贵公司的整体情况。我非常期待能够加入贵公司，也希望贵公司能给我提供广阔的一个学习和成长平台。</p>]]></content>
    
    
    <categories>
      
      <category>找工作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据操作工具awk</title>
    <link href="/2023/03/20/Linux-awk%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/"/>
    <url>/2023/03/20/Linux-awk%E6%95%B0%E6%8D%AE%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="awk简介">awk简介</h2><p>一种便于使用且表达能力强的程序设计语言，适用于计算和数据处理任务</p><h3 id="awk与sed区别">awk与sed区别</h3><p><strong>sed</strong> 适用于在shell程序中对文本内容进行增删改查等操作<br><strong>awk</strong> 适用于计算和数据处理任务</p><h2 id="awk命令语法">awk命令语法</h2><p>awk ‘BEGIN{ commands } pattern{ commands } END{ commands }’</p><h2 id="awk命令运行过程">awk命令运行过程</h2><ol><li>通过关键字BEGIN执行BEGIN后花括号{}后的内容</li><li>pattern部分匹配成功后，依次对该行执行pattern后花括号后的内容，循环读取文件直到文件结束</li><li>开始 END 块执行，END 块可以输出最终结果</li></ol><h2 id="awk命令示例">awk命令示例</h2><p><img src="https://uploadfiles.nowcoder.com/images/20210524/369118006_1621844132524/AE45D4543A7F199C549F0BE9B5BF9D49" alt="图片说明" title="图片标题"></p><h3 id="仅包含主体模块">仅包含主体模块</h3><p>打印出工作时间超过零小时的员工的姓名和工资（薪资乘以时间）</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">awk</span> &#x27;$<span class="hljs-number">3</span> &gt;<span class="hljs-number">0</span> &#123; print $<span class="hljs-number">1</span>, $<span class="hljs-number">2</span> * $<span class="hljs-number">3</span> &#125;’ file  <br></code></pre></td></tr></table></figure><h3 id="包含主体模块和开始模块">包含主体模块和开始模块</h3><p>打印出工作时间超过零小时的员工的姓名和工资，第一行输出字符串 NAME和SALARY</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;BEGIN &#123;print “NAME SALARY”&#125;  <span class="hljs-variable">$3</span> &gt;0 &#123; print <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h3 id="包含所有模块">包含所有模块</h3><p>打印出所有员工的姓名和工资,第一行输出字符串 NAME和SALARY，最后要输出员工数、付出的总薪酬以及员工的平均薪酬</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stata">awk &#x27;BEGIN &#123;<span class="hljs-keyword">print</span> <span class="hljs-string">&quot;NAME SALARY&quot;</span>&#125;  <br>              &#123; <span class="hljs-keyword">print</span> <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span>; <br>                     pay=pay+<span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>    &#125;  <br>         END&#123; <span class="hljs-keyword">print</span> NR, <span class="hljs-string">&quot;employees&quot;</span><br>                  <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;total pay is&quot;</span>, pay <br>                  <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;average pay is&quot;</span>, pay/NR<br>                  &#125;&#x27;  <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h2 id="数据输出">数据输出</h2><h3 id="简单输出">简单输出</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">打印所有行<br>   &#123; <span class="hljs-built_in">print</span> &#125;、&#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$0</span> &#125;<br>打印特定字段<br>   &#123; <span class="hljs-built_in">print</span> NF, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$3</span> &#125;、NF表示一行中字段总数量<br>   &#123; <span class="hljs-built_in">print</span> NR, <span class="hljs-variable">$0</span> &#125;、NR表示行号<br>打印时进行计算<br>   &#123; <span class="hljs-built_in">print</span> <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;<br>输出中添加内容<br>   &#123; <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;total pay for&quot;</span>, <span class="hljs-variable">$1</span>, <span class="hljs-string">&quot;is&quot;</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span> &#125;<br></code></pre></td></tr></table></figure><h4 id="包含所有模块-2">包含所有模块</h4><p>对文件file进行处理，打印出行号、每行字段数、姓名工资信息</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;&#123;print NR,NF,<span class="hljs-variable">$1</span>,<span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>&#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h3 id="格式化输出">格式化输出</h3><p><strong>printf (format, value1, value2, …, valuen)</strong></p><ol><li>跟C语言printf语句格式基本一致</li><li>按照format格式排列输出内容</li></ol><br/>对文件file进行处理，打印出姓名、工资信息，并且要求姓名字段占8个字符宽度，对齐格式为左对齐；工资字段占6个字符的宽度，对齐格式为右对齐<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">awk</span> <span class="hljs-string">&#x27;&#123; printf(&quot;%-8s $%6.2f\n&quot;, <span class="hljs-variable">$1</span>, <span class="hljs-variable">$2</span> * <span class="hljs-variable">$3</span>) &#125;&#x27;</span> file<br></code></pre></td></tr></table></figure><h2 id="数据选择">数据选择</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash">通过对比选择<br>   <span class="hljs-variable">$2</span> &gt;=5 &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过计算选择<br>   <span class="hljs-variable">$2</span>*<span class="hljs-variable">$3</span>&gt;50 &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过文本内容选择<br>   <span class="hljs-variable">$1</span> == <span class="hljs-string">&quot;Susie&quot;</span> &#123;<span class="hljs-built_in">print</span>&#125;<br>   /Susie/ &#123;<span class="hljs-built_in">print</span>&#125;<br><br>通过模式组合选择<br>   <span class="hljs-variable">$2</span>&gt;=4||<span class="hljs-variable">$3</span>&gt;=20 &#123;<span class="hljs-built_in">print</span>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流式编辑命令sed</title>
    <link href="/2023/03/20/Linux-sed%E6%B5%81%E5%BC%8F%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/20/Linux-sed%E6%B5%81%E5%BC%8F%E7%BC%96%E8%BE%91%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="sed简介">sed简介</h2><ol><li>一种新型的，非交互式的编辑器（vi编辑器为交互式）<br>2.sed编辑器没有破坏性，它不会修改文件<br>3.默认输出到屏幕</li></ol><h2 id="sed工作过程">sed工作过程</h2><p>1.从文件中读入一行数据并把它保存在临时缓冲区中<br>2.处理临时缓冲区的内容，并将处理结果发送到显示器上<br>3.逐行处理文件所有内容直到最后一行</p><h2 id="sed-命令语法">sed 命令语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">sed <span class="hljs-selector-attr">[选项]</span> ‘脚本’ 文件<br></code></pre></td></tr></table></figure><h3 id="选项">选项</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-n  使用安静模式</span><br><span class="hljs-deletion">-e  多重编辑选项</span><br><span class="hljs-deletion">-f   指定一个 sed 脚本文件到命令行执行</span><br><span class="hljs-deletion">-r   sed 使用扩展正则表达式</span><br><span class="hljs-deletion">-I   直接修改文档读取的内容，不在屏幕上输出</span><br></code></pre></td></tr></table></figure><p>将文件file中的A用you来替换</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sed –n ‘s<span class="hljs-regexp">/A/y</span>ou/p’ <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>在第一行前增加一行’ZS 90 85 B’，然后删除包含字符串” FC”的行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sed</span> -e &#x27;<span class="hljs-number">1</span>i ZS <span class="hljs-number">90</span> <span class="hljs-number">85</span> B&#x27; -e &#x27;/FC/d&#x27; file<br></code></pre></td></tr></table></figure><h3 id="脚本">脚本</h3><h4 id="地址定位：用于确定处理哪些行">地址定位：用于确定处理哪些行</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">单地址：n，指定的行，如：sed ‘<span class="hljs-number">3</span>s<span class="hljs-regexp">/A/y</span>ou/’ <span class="hljs-keyword">file</span><br>地址范围：n1,n2、n1,+n2、 <span class="hljs-regexp">/pat1/</span>,<span class="hljs-regexp">/pat2/</span>、 n1,<span class="hljs-regexp">/pat1/</span> <br><span class="hljs-regexp">/pat/</span>：模式pat所能够匹配到的每一行<br>~：步进，<span class="hljs-number">1</span>~<span class="hljs-number">2</span> 奇数行、 <span class="hljs-number">2</span>~<span class="hljs-number">2</span> 偶数行<br>不给地址：对全文进行处理<br></code></pre></td></tr></table></figure><p>将文件file中的奇数行中的A用you来替换</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">sed</span> &#x27;<span class="hljs-number">1</span>~<span class="hljs-number">2</span> s/A/you/&#x27; file<br></code></pre></td></tr></table></figure><p>将文件file中的/C/和/A/之间的A用you来替换</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">sed ‘<span class="hljs-regexp">/C/</span>,<span class="hljs-regexp">/A/</span> s<span class="hljs-regexp">/A/y</span>ou/’ <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h4 id="编辑命令：对文本进行增删改查等操作">编辑命令：对文本进行增删改查等操作</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">a</span>：在指定行后面追加文本；支持使用\<span class="hljs-selector-tag">n</span>实现多行追加 <br><span class="hljs-selector-tag">i</span>：在指定行前面插入文本 <br><span class="hljs-selector-tag">d</span>：删除匹配的行<br><span class="hljs-selector-tag">s</span>：替换字符串, <span class="hljs-selector-tag">s</span><span class="hljs-comment">///，s@@@，s###</span><br><span class="hljs-selector-tag">c</span>：替换匹配行<br></code></pre></td></tr></table></figure><p>在文件file中的第一行后增加两行，”Hello Linux!\nHello sed！”</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;1a Hello Linux!\nHello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>删除文件file包含字符9的行</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/9/d&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将文件file中的字符串/bin/bash替换成/bin/csh</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;s#/bin/bash#/bin/csh#&#x27;</span> <span class="hljs-keyword">file</span>   (采用＃号分隔符)<br></code></pre></td></tr></table></figure><p>将第3行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;3c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将包含字符A的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/A/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><h4 id="sed正则中的元字符">sed正则中的元字符</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">^：表示行首 <br>$：表示行尾 <br><span class="hljs-string">[a-z0-9]</span>：表示字符范围<br><span class="hljs-string">[^]</span>：表示除了字符集中的字符以外的字符<br>. ：表示任意字符 <br>*：表示零个或者多个<br></code></pre></td></tr></table></figure><p>将以字符A开头的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/^A/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将以字符A的结尾的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/A$/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure><p>将以字符A、B开头的行用”Hello sed!”替换</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs delphi">sed <span class="hljs-string">&#x27;/^[AB]/c Hello sed!&#x27;</span> <span class="hljs-keyword">file</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vi编辑器</title>
    <link href="/2023/03/20/Linux-vi%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <url>/2023/03/20/Linux-vi%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="vi编辑器三种模式">vi编辑器三种模式</h2><h3 id="命令模式-Command-mode">命令模式 (Command mode)</h3><p>通过在键盘上输入相关命令，实现控制屏幕光标的移动，删除字符或行的内容，撤销文本的修改，移动复制文本等功能，以及进入到插入模式或底线模式中。</p><h3 id="插入模式-Insert-mode">插入模式 (Insert mode)</h3><p>只有在插入模式下，才可以进行文本编辑。<br>在插入模式中，任何字符都将被当作文本输入到文件中。</p><h3 id="底线模式-Last-Line-mode">底线模式 (Last Line mode)</h3><p>主要进行一些文字编辑的辅助功能，比如字符串搜索，替换和保存文件等操作。</p><h3 id="三种模式间转换">三种模式间转换</h3><p><img src="https://uploadfiles.nowcoder.com/images/20210419/369118006_1618825411496/25EA65C2A1DB93363CD580B664ABB0CB" alt="转换"></p><hr><p>#编辑一个文件<br>创建新文件，进入vi编辑器 <code>vi name</code><br>查看文件内容 <code>more name</code><br>回退:<code>N</code><br>结束:<code>q</code><br>撤销:<code>u</code><br>返回第一个文件<code>rew</code><br>设置行号: <code>:set nu</code><br>文件不存盘退出<code>:q!(:q)</code><br>文件存盘退出<code>:wq!(:wq)</code><br>文件不存盘退出查看内容，查看文件是否为只读内容文件<code>:ls -l name</code><br>文件存盘退出查看内容，在当前界面确认文件内容是否被修改<code>more name</code></p><hr><h2 id="移动光标">移动光标</h2><p>数字键+方向键 <code>(kjhl)</code><br><code>w</code>向前移动一单词，<code>b</code>向后移动一单词，<code>e</code>移动到本单词末尾<br>移动到行首: <code>^</code><br>移动到行尾: <code>＄</code>  <code>2＄(第二行行尾)</code></p><hr><h2 id="添加文本">添加文本</h2><p>在光标上方插入: <code>O</code><br>在光标下方插入: <code>o</code><br>在行首插入文本: <code>I</code><br>在行末插入文本: <code>A</code></p><hr><h2 id="查找字符串">查找字符串</h2><p>向前查找字符串: /…(N)<br>向后查找字符串: /…(n)</p><hr><h2 id="字符替换">字符替换</h2><p>单个字符替换: <code>r</code><br>逐字符覆盖文本: <code>R</code><br>对单词替换: <code>cw</code><br><strong>替换字符串</strong>: <code>[range]s/s1/s2/ [option]</code></p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs crystal">[range] 表示检索范围，省略时表示当前行<br><span class="hljs-number">1</span>,<span class="hljs-number">10</span>表示从第<span class="hljs-number">1</span>行到<span class="hljs-number">10</span>行<br>%表示整个文件，同<span class="hljs-number">1</span>,<span class="hljs-variable">$</span><br><span class="hljs-variable"></span> ,<span class="hljs-variable">$从</span>当前行到文件尾<br><br>s 为替换命令<br>s1 要被替换的串，s2 为替换的串<br><br>option 表示选项：<br><span class="hljs-regexp">/g表示在全局文件中进行替换</span><br><span class="hljs-regexp">/c</span>表示在每次替换之前需要用户进行确认<br>省略时仅对每行第一个匹配串进行替换<br></code></pre></td></tr></table></figure><hr><h2 id="文本复制，剪切，粘贴">文本复制，剪切，粘贴</h2><p>复制单词: <code>yl</code><br>复制一行: <code>yy</code><br>粘贴: <code>p</code><br>剪切: <code>x</code><br>复制指定字符: <code>yfy</code> <code>（此处y是所指选择单词January的最后一个字符）</code><br>剪切指定字符: <code>Dfy</code><br>复制单词: <code>yw</code> <code>2yw</code><br>剪切单词: <code>dw</code></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shell脚本程序</title>
    <link href="/2023/03/20/Linux-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/"/>
    <url>/2023/03/20/Linux-shell%E8%84%9A%E6%9C%AC%E7%A8%8B%E5%BA%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="shell脚本特点">shell脚本特点</h2><p><em>1.  适合对服务器管理</em><br><em>2.  不适合做大量数值运算的任务</em><br><em>3.</em></p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">第一行 #!<span class="hljs-regexp">/bin/</span>bash<br></code></pre></td></tr></table></figure><br><h2 id="shell脚本运行方式">shell脚本运行方式</h2><ol><li><p><code>sh/bash 文件名</code><br>创建子进程运行：程序运行完后程序中的变量失效</p></li><li><p><code>./文件名</code><br>先将文件变成可执行文件，如：<code>chmod 711 sh01.sh</code><br>创建子进程运行：程序运行完后程序中的变量失效</p></li><li><p><code>source 文件名</code><br>当前(父)进程运行：程序运行完后程序中的变量有效</p></li></ol><br><h2 id="shell脚本运行过程">shell脚本运行过程</h2><ol><li>命令执行自上而下、自左向右；</li><li>命令、参数间多个空白、空白行被忽略；</li><li>程序中读到一个Enter符号（CR），就尝试开始执行该行命令；</li><li>一行内容太多，可使用”[Enter]”来扩展至下行；</li></ol><br><h2 id="shell变量">shell变量</h2><h3 id="本地变量：">本地变量：</h3><p>变量名＝变量值<br><code>s1=hello</code><br><code>s2=&quot;hello world&quot;</code><br>若等号两边有空格，则必须使用引号括起来</p><h3 id="环境变量：">环境变量：</h3><p>export 变量名＝变量值<br><code>export s1=hello</code></p><h3 id="预定义变量：">预定义变量：</h3><p>预定义变量是系统自带的变量，系统启动后即存在<br>常见预定义变量<br><img src="https://uploadfiles.nowcoder.com/images/20210426/369118006_1619450539194/48C9588BDBC44ED6FE18A3A8405A17DC" alt="图片说明" title="图片标题"></p><h3 id="变量的设置规则：">变量的设置规则：</h3><ol><li>变量与变量值以等号“=”来连接</li><li>等号两边不能直接接空格</li><li>变量名称只能是英文字母、下划线与数字，但数字不能是开头字符</li><li>若有空格，可以使用双引号或单引号将变量内容括起来</li></ol><h3 id="变量的引用：">变量的引用：</h3><p>引用变量时则应在变量名前加一个美元符号<code>$</code></p><p><code>s1=hello</code><br><code>s3=$s1</code></p><h3 id="变量的显示：echo命令">变量的显示：<code>echo</code>命令</h3><ol><li>echo $变量名</li><li>echo ${变量名}</li><li>echo “$变量名”</li></ol><h3 id="变量的读入：read命令">变量的读入：<code>read</code>命令</h3><p><code>read [-pt] 变量名</code><br>-p：后面可以接提示信息<br>-t：后面可接等待的秒数，为了防止一直等待用户输入。</p><h3 id="变量的释放：unset命令">变量的释放：<code>unset</code>命令</h3><p><code>unset s1</code></p><h3 id="查看系统环境变量：env">查看系统环境变量：<code>env</code></h3><p>常见环境变量 <code>echo $PATH</code><br><img src="https://uploadfiles.nowcoder.com/images/20210426/369118006_1619450393872/642B4A9D58C8B7074C55CD3E28AA2F21" alt="图片说明" title="图片标题"></p><p>将路径/usr/hadoop/bin加入到命令搜索路径PATH变量中</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/hadoop/bin</span><br>或<br>vi .bashrc  在末尾加入  <span class="hljs-title class_">PATH</span>=<span class="hljs-variable">$PATH</span><span class="hljs-symbol">:/usr/hadoop/bin</span><br></code></pre></td></tr></table></figure><p>#条件判断式</p><h2 id="test命令">test命令</h2><h3 id="文件的存在性测试">文件的存在性测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-e文件是否存在 (常用)</span><br><span class="hljs-deletion">-f文件是否存在且为文件(file) (常用)</span><br><span class="hljs-deletion">-d文件是否存在且为目录(directory) (常用)</span><br><span class="hljs-deletion">-b文件是否存在且为一个block device 文件</span><br><span class="hljs-deletion">-c文件是否存在且为一个character device 文件</span><br><span class="hljs-deletion">-S文件是否存在且为一个Socket 文件</span><br><span class="hljs-deletion">-p文件是否存在且为一个FIFO (pipe) 文件</span><br><span class="hljs-deletion">-L文件是否存在且为一个链接文件</span><br></code></pre></td></tr></table></figure><h3 id="文件的权限测试">文件的权限测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-r检测该文件是否存在且具有『可读』的权限</span><br><span class="hljs-deletion">-w检测文件是否存在且具有『可写』的权限</span><br><span class="hljs-deletion">-x检测文件是否存在且具有『可运行』的权限</span><br><span class="hljs-deletion">-u检测文件是否存在且具有『SUID』的属性</span><br><span class="hljs-deletion">-g检测文件是否存在且具有『SGID』的属性</span><br><span class="hljs-deletion">-k检测文件是否存在且具有『Sticky bit』的属性</span><br><span class="hljs-deletion">-s检测文件是否存在且为『非空白文件』</span><br></code></pre></td></tr></table></figure><h3 id="文件的新旧测试">文件的新旧测试</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-nt(newer than)判断两个文件到底哪一个文件要新</span><br><span class="hljs-deletion">-ot(older than)判断两个文件哪个文件要旧</span><br><span class="hljs-deletion">-ef判断两个文件是否为同一文件，可用于判断硬链接文件</span><br></code></pre></td></tr></table></figure><h3 id="数值大小测试">数值大小测试</h3><p>关于两个整数之间的判定：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cmake">-eq测试两数值是否相等(<span class="hljs-keyword">equal</span>)<br>-ne测试两数值是否不等(<span class="hljs-keyword">not</span> <span class="hljs-keyword">equal</span>)<br>-gt测试前一个数值n1 是否大于后一个数值n2 (<span class="hljs-keyword">greater</span> than)<br>-lt测试n1 是否小于n2 (<span class="hljs-keyword">less</span> than)<br>-ge测试n1是否 大于等于n2 (<span class="hljs-keyword">greater</span> than <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>)<br>-le测试n1是否 小于等于n2 (<span class="hljs-keyword">less</span> than <span class="hljs-keyword">or</span> <span class="hljs-keyword">equal</span>)<br></code></pre></td></tr></table></figure><h3 id="字符串测试">字符串测试</h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript">-z用于测试字符串长度是否为<span class="hljs-number">0</span>，若字符串为空，则返回<span class="hljs-literal">true</span><br>-n用于测试字符串长度是否为非<span class="hljs-number">0</span>，若字符串为非空，则返回<span class="hljs-literal">true</span><br> =用于判断两个字符串是否相等，若相等则返回<span class="hljs-literal">true</span><br>!=用于判断两个字符串是否不相等，若不相等，则返回<span class="hljs-literal">true</span><br>      (等号或不等号两边必须要有空格)<br></code></pre></td></tr></table></figure><h3 id="多重条件判定">多重条件判定</h3><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a两种情况同时成立时才回传true    (and)</span><br><span class="hljs-deletion">-o两种情况任何一个成立就可回传true    (or)</span><br><span class="hljs-addition">!反相状态</span><br></code></pre></td></tr></table></figure><h3 id="例题">例题</h3><p>使用者输入一个档名，程序判断：</p><ol><li>这个文件是否存在，若不存在则给予一个『Filename does not exist』的信息，并中断程序；（命令排列）</li><li>若这个文件存在，则判断它是文件还是目录，结果输出『Filename is regular file』或 『Filename is directory』</li><li>判断当前用户对这个文件或目录所拥有的权限，并输出权限信息！</li></ol><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs subunit">1. 让使用者输入文件名，并且判断使用者是否真的有输入字串？<br>echo -e &quot;Please input a filename, I will check the filename&#x27;s type and permission. \n\n&quot;<br>read -p &quot;Input a filename : &quot; filename<br><span class="hljs-keyword">test </span>-z $filename &amp;&amp; echo &quot;You MUST input a filename.&quot; &amp;&amp; exit 0<br>2. 判断文件是否存在？若不存在则显示信息并结束脚本<br><span class="hljs-keyword">test </span>! -e $filename &amp;&amp; echo &quot;The filename &#x27;$filename&#x27; DO NOT exist&quot; &amp;&amp; exit 0<br>3.  开始判断文件类型与属性<br><span class="hljs-keyword">test </span>-f $filename &amp;&amp; filetype=&quot;regulare file&quot;<br><span class="hljs-keyword">test </span>-d $filename &amp;&amp; filetype=&quot;directory&quot;<br><span class="hljs-keyword">test </span>-r $filename &amp;&amp; perm=&quot;readable&quot;<br><span class="hljs-keyword">test </span>-w $filename &amp;&amp; perm=&quot;$perm writable&quot;<br><span class="hljs-keyword">test </span>-x $filename &amp;&amp; perm=&quot;$perm executable&quot;<br>4.  开始输出<br>echo &quot;The filename: $filename is a $filetype&quot;<br>echo &quot;And the permissions are : $perm&quot;<br></code></pre></td></tr></table></figure><h2 id="条件判断符">条件判断符</h2><h3 id="中括号判断符">中括号判断符: []</h3><p>能实现和test命令一样的功能;<br>为了与通配符区分，各元素间均有空格；<br><img src="https://uploadfiles.nowcoder.com/images/20210427/369118006_1619516227214/E6D9361A6BD4B8442E395228CABCE477" alt="图片说明" title="图片标题"></p><br><h2 id="条件结构化命令-if-else">条件结构化命令 if-else</h2><h3 id="单层条件结构化命令">单层条件结构化命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [条件判断式 ]; <span class="hljs-keyword">then</span><br>    语句1<br><span class="hljs-keyword">else</span><br>    语句2<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h3 id="多层条件结构化命令">多层条件结构化命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">if</span> [ 条件判断式1 ]; <span class="hljs-keyword">then</span><br>    语句1<br><span class="hljs-keyword">elif</span>  [ 条件判断式2 ]; <span class="hljs-keyword">then</span><br>    语句2<br><span class="hljs-keyword">else</span><br>    语句3<br><span class="hljs-keyword">fi</span><br></code></pre></td></tr></table></figure><h2 id="case命令">case命令</h2><h3 id="格式">格式</h3><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">case  <span class="hljs-tag">&lt;<span class="hljs-name">变量</span>&gt;</span>  in</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">字符串1</span>&gt;</span> )  </span><span class="hljs-template-variable">&#123;&lt;命令清单1&gt;&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">...</span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">字符串n</span>&gt;</span> )  </span><span class="hljs-template-variable">&#123;&lt;命令清单n&gt;&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">*)  </span><span class="hljs-template-variable">&#123;其他命令&#125;</span><span class="language-xml">;;</span><br><span class="language-xml">esac</span><br></code></pre></td></tr></table></figure><h3 id="例题-2">例题</h3><p>写一个shell脚本命名为capital，要求运行程序时输入国家名字，程序能输出这个国家的首都。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br>  China)   <span class="hljs-built_in">echo</span> Beijing;;<br>  USA)      <span class="hljs-built_in">echo</span> Washington;;<br>  British)  <span class="hljs-built_in">echo</span> London;;<br>  Russia)   <span class="hljs-built_in">echo</span> Moskow;;<br>  *)<span class="hljs-built_in">echo</span> Out of my knowledge;; <br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><br><h2 id="循环结构化命令">循环结构化命令</h2><h3 id="for循环语句">for循环语句</h3><h4 id="语法一">语法一</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span>((变量赋值; 条件判断; 变量迭代))<br><span class="hljs-keyword">do</span> <br>    语句块1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>编写一个程序，打印乘法公式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">for</span>((i=<span class="hljs-number">1</span>; i&lt;<span class="hljs-number">10</span>; i++))<br><span class="hljs-keyword">do</span> <br>    <span class="hljs-keyword">for</span>((j=<span class="hljs-number">1</span>; j&lt;=i; j++))<br>    <span class="hljs-keyword">do</span><br>        <span class="hljs-built_in">echo</span> -n “<span class="hljs-variable">$j</span>*<span class="hljs-variable">$i</span>=$((<span class="hljs-variable">$i</span>*<span class="hljs-variable">$j</span>)) ”<br>    <span class="hljs-keyword">if</span> [ <span class="hljs-variable">$i</span> -eq <span class="hljs-variable">$j</span> ]<br>    <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">echo</span> $‘\n’<br>    <span class="hljs-keyword">fi</span>   <br>    <span class="hljs-keyword">done</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h4 id="语法二">语法二</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">for</span>  <span class="hljs-keyword">var</span>  <span class="hljs-keyword">in</span>  item1 item2 … itemN<br><span class="hljs-keyword">do</span> <br>    语句块<span class="hljs-number">1</span><br>done<br></code></pre></td></tr></table></figure><h4 id="取值列表是变量">取值列表是变量</h4><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">list</span>=“beijing tianjing shanghai guangzhou”<br><span class="hljs-attribute">list</span>=<span class="hljs-variable">$list</span>” xizang”<br><span class="hljs-keyword">for</span> scenery <span class="hljs-keyword">in</span> <span class="hljs-variable">$list</span><br><span class="hljs-keyword">do</span> <br>    echo “Have you visited <span class="hljs-variable">$scenery</span>?”<br>done<br><br>*<br>Have you visited beijing?<br>Have you visited tianjing?<br>Have you visited shanghai?<br>Have you visited guangzhou?<br>Have you visited xizang?<br></code></pre></td></tr></table></figure><h4 id="取值列表存在文件中">取值列表存在文件中</h4><p><img src="https://uploadfiles.nowcoder.com/images/20210427/369118006_1619519388689/C895BDE262979453BE63020C2C85311F" alt="图片说明" title="图片标题"></p><h3 id="while循环语句">while循环语句</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> [  条件判断式  ]<br><span class="hljs-keyword">do</span><br>语句块1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>当用户输入break或者BREAK才结束程序执行，否则就一直告知用户输入字符串，并将用户输入字符串输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">while</span> [ <span class="hljs-string">&quot;<span class="hljs-variable">$yn</span>&quot;</span> != “<span class="hljs-built_in">break</span><span class="hljs-string">&quot; -a &quot;</span><span class="hljs-variable">$yn</span><span class="hljs-string">&quot; != “BREAK&quot;</span> ]<br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p “Please input a string :  (<span class="hljs-built_in">break</span>/Break to stop) <span class="hljs-string">&quot; yn</span><br><span class="hljs-string">echo You input a string : <span class="hljs-variable">$yn</span></span><br><span class="hljs-string">done</span><br><span class="hljs-string">echo &quot;</span>OK! you interrupt the program.<span class="hljs-string">&quot;</span><br></code></pre></td></tr></table></figure><p>编写猜字游戏，当用户输入指定的字符串后才结束游戏，否则就一直告知用户再试一次</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#! /bin/bash</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br><span class="hljs-built_in">read</span> -p $’Guess word\n ( Tips : The word consists of four blocks, the first word is “g”, the last word is “d”)\n’ word<br><span class="hljs-keyword">if</span> [ <span class="hljs-variable">$word</span> != “good” ]<br><span class="hljs-keyword">then</span><br><span class="hljs-built_in">echo</span> “Try again!”<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">echo</span> “Bingo, you are right!”<br><span class="hljs-built_in">break</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu基本操作</title>
    <link href="/2023/03/20/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/03/20/Linux%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="Ubuntu关机命令：">Ubuntu关机命令：</h2><h4 id="shutdown">shutdown:</h4><p><strong>sudo shutdown</strong></p><ol><li>-k 并不会关机，只发出警告信息给所以用户</li><li>-r 重新启动系统</li><li>-h 关闭系统</li><li>-c 取消运行shutdown</li></ol><h4 id="halt">halt:</h4><p>相当于 shutdown -h<br><strong>sudo halt</strong></p><ol><li>-w 并不会关机，将关机信息写入到/var/log/wtmp文件中</li><li>-d 关闭系统，不把记录写到/var/log/wtmp日志文件中</li><li>-f 不调用shutdown而强制关闭系统</li></ol><h4 id="reboot">reboot:</h4><p>重启<br><strong>sudo reboot</strong></p><ol><li>-w 并不会真正重启系统，将重启信息写入到/var/log/wtmp文件中</li><li>-d 重启系统，不把记录写到/var/log/wtmp日志文件中</li><li>-f 不调用shutdown而强制重启系统<br> </li></ol><hr><h2 id="命令语法规则：">命令语法规则：</h2><h4 id="命令自动补全：tab">命令自动补全：tab</h4><h4 id="历史命令查看：history">历史命令查看：history</h4><h4 id="命令替换：-命令的参数可由令一个命令的接果来替代">命令替换： 命令的参数可由令一个命令的接果来替代</h4><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">kill</span> <span class="hljs-variable">$</span>(pidof less)  <br><span class="hljs-built_in">kill</span> <span class="hljs-string">&#x27;pidof less&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="命令别名：-alias">命令别名： alias</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alias</span> <span class="hljs-keyword">work</span> = &quot;cd /home/user/program/cplus&quot;<br>unalias <span class="hljs-keyword">work</span><br></code></pre></td></tr></table></figure><p> </p><hr><h2 id="软件安装">软件安装</h2><h4 id="dpkg-Debian-Package">dpkg(Debian Package)</h4><ol><li>-i 安装软件(install)</li><li>-R 安装一个目录下面所有的软件包(Regressive)</li><li>-r 删除软件包，但保存其配置信息(remove)</li><li>-L 查看软件安装文件所在位置(Location)</li></ol><h4 id="apt-Advanced-Packaging-Tool">apt(Advanced Packaging Tool)</h4><ol><li>apt-get install 安装包</li><li>apt-get reinstall 重新安装包</li><li>apt-get -f install 修复安装</li><li>apt-get remove 删除包</li><li>apt-get autoremove 删除包及其依赖</li><li>apt-get upgrade 更新已安装的包</li></ol><h2 id="目录与文件">目录与文件</h2><br/><h3 id="更改工作目录：cd">更改工作目录：cd</h3><ol><li>cd … 转到当前目录的上层目录</li><li>cd ~ 转到当前用户的家目录</li><li>cd …/…/ 转到当前目录的上上层目录</li><li>pwd 显示当前工作目录</li></ol><br/><h3 id="目录与文件查看-ls">目录与文件查看: ls</h3><ol><li>-l 以长格式形式显示</li><li>-a 显示所有文件或目录，包括隐藏文件</li><li>-i 显示文件索引信息，也就是文件的inode号</li><li>-d 列出目录</li></ol><br/><h3 id="创建工作目录-mkdir">创建工作目录: mkdir</h3><ol><li>-m 指定所有用户对新建目录的权限</li><li>-p 可以强制创建多层目录</li></ol><br/><h3 id="创建空文件-touch">创建空文件: touch</h3><br/><h3 id="创建文件并写入内容-cat">创建文件并写入内容: cat</h3><p><code>cat &gt; file</code> 输入内容 ctrl+c</p><p><code>cat file</code> 查看是否创建成功</p><br/><h3 id="向文件中写入内容-echo-hello-world-file">向文件中写入内容: echo hello world &gt; file</h3><br/><h3 id="复制文件或目录-cp">复制文件或目录: cp</h3><p>-r 递归复制</p><p>复制文件file1到/tmp中并重命名尾file2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp file1 <span class="hljs-regexp">/tmp/</span>file2<br></code></pre></td></tr></table></figure><p>复制/root/file1到/tmp中并重命名为file2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cp <span class="hljs-regexp">/root/</span>file1 <span class="hljs-regexp">/tmp/</span>file2<br></code></pre></td></tr></table></figure><p>复制当前目录下以.bak结尾的文件到/tmp中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span>*.bak /tmp<br></code></pre></td></tr></table></figure><br/><h3 id="更改文件或目录名称-mv">更改文件或目录名称: mv</h3><p>将/tmp目录下的pic重命名为pic2</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/tmp/</span>pic <span class="hljs-regexp">/tmp/</span>pic2<br></code></pre></td></tr></table></figure><br/><h3 id="目录与文件移动-mv">目录与文件移动: mv</h3><p>将pic目录下的所有以png结尾的文件移动到/usr/local/share/pic下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">mv <span class="hljs-regexp">/tmp/</span>pic<span class="hljs-regexp">/*.png /u</span>sr<span class="hljs-regexp">/local/</span>share/pic<br></code></pre></td></tr></table></figure><br/><h3 id="删除文件或目录-rm">删除文件或目录: rm</h3><ol><li>-r 递归删除，可以删除目录下的文件或目录</li><li>-f 删除文件时不提醒而强制删除</li><li>rmdir 只能删除空目录</li></ol><p>删除文件名中包含字符4且以 .bak结尾的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> *<span class="hljs-number">4</span><span class="hljs-regexp">*.bak</span><br></code></pre></td></tr></table></figure><p>删除当前目录下扩展名有四个字符的文件</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">rm *.<span class="hljs-string">??</span><span class="hljs-string">??</span><br></code></pre></td></tr></table></figure><p>删除文件首字母为a,b或c，且扩展名为.txt的文件</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rm</span> [abc]<span class="hljs-regexp">*.txt</span><br></code></pre></td></tr></table></figure><p>删除文件名为数字字符开头，且文件扩展名为两个字符的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> [0-9]*.??<br></code></pre></td></tr></table></figure><br/><h3 id="文件详细信息-stat">文件详细信息: stat</h3><hr><p></p><h2 id="文件权限及内容显示">文件权限及内容显示</h2><br/><h3 id="文件权限-chmod">文件权限: chmod</h3><p>用户分类： 文件拥有者(user)、同组用户(group)、其他用户(others)<br>三种权限： 读®、写(w)、执行(x)</p><br/><h4 id="字符设定法">字符设定法</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs excel">语法：chmod [who] [+ | - | =] [<span class="hljs-built_in">mode</span>] 文件名<br>说明：[who]可是下述字符中的一个或它们的组合：<br>u（user）：表示“用户”，即文件或目录的所有者<br>g（group）：表示“同组用户”<br>o（others）：表示“其他用户”<br>a（all）：表示“所有用户”<br>[+ | - | =] ：+表示添加某个权限；-表示取消某个权限；<br>=表示赋予给定权限<br>[<span class="hljs-built_in">mode</span>]：r(可读)、w(可写)、x(可执行)<br></code></pre></td></tr></table></figure><p>设定文件test1的属性为：文件属主（u）增加执行权限，与文件属主同组用户（g）增加执行权限，其他用户（o）增加执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a+x test1<br></code></pre></td></tr></table></figure><p>设定文件test2的属性为：文件属主（u）增加写权限，与文件属主同组用户（g）增加写权限，其他用户（o）删除写、执行权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> ug+w,o-wx test2<br></code></pre></td></tr></table></figure><p>删除文件test3的执行权限，以下三个命令均可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> a-x test3<br><span class="hljs-built_in">chmod</span> -x test3<br><span class="hljs-built_in">chmod</span> ugo-x test3<br></code></pre></td></tr></table></figure><p>把文件test4的执行权限改为rwxrw-rw-</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">chmod <span class="hljs-attribute">u</span>=rwx,g=rw,o=rw test4<br></code></pre></td></tr></table></figure><br/><p>###数值设定法 -&gt; 数值计算： r:4, w:2, x:1</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> 数值 文件名<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros">数值计算：若权限为[-rwxrw----]<br><span class="hljs-attribute">ower</span>=rwx=(111)2=4+2+1=7 <br><span class="hljs-attribute">group</span>=rw-=(110)2=4+2+0=6<br><span class="hljs-attribute">others</span>=---=(000)2=0<br>理解： mode可分为3个8进制数字，将每个8进制数字转化为2进制数字，1对应的赋予相应的权限，0对应的取消相应的权限<br></code></pre></td></tr></table></figure><p>设定文件aaa的属性为文件属主（u）拥有读、写权限，与文件属主同组用户（g）拥有读权限，其他人（o）拥有读权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">644</span> aaa<br></code></pre></td></tr></table></figure><p>设定bbb这个文件的属性为：文件属主（u）可读/可写/可执行权，与文件属主同组用户（g）可读/可执行权，其他人（o）没有任何权限</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> <span class="hljs-number">750</span> bbb<br></code></pre></td></tr></table></figure><h3 id="文件内容显示">文件内容显示</h3><h4 id="cat-查看文件，在屏幕上显示文件内容">cat: 查看文件，在屏幕上显示文件内容</h4><ol><li>-n 显示出行号</li><li>-A 显示文件中所有字符，包括隐藏字符</li></ol><br/><h4 id="more-分页显示文件内容">more: 分页显示文件内容</h4><p><strong>读完文件再显示</strong>；按住空格往前翻； <code>ctrl+f</code> 往前翻页；  <code>ctrl+b</code> 往后翻页；按q键退出所有查看的文件</p><br/><h4 id="less-分页显示文件内容">less: 分页显示文件内容</h4><p><strong>边读边显示，启动快</strong>；按住空格往前翻； <code>ctrl+f</code> 往前翻页；  <code>ctrl+b</code> 往后翻页；按q键退出所有查看的文件；less扩展了more命令的功能</p><br/><h4 id="head-查看文件头几行数据；了解文件中数据模式">head: 查看文件头几行数据；了解文件中数据模式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">head</span> -n 15 <span class="hljs-built_in">test</span> //查看<span class="hljs-built_in">test</span>文件的前15行<br><span class="hljs-built_in">head</span> <span class="hljs-built_in">test</span> //默认输出前10行<br></code></pre></td></tr></table></figure><br/><h4 id="tail：-查看文件末尾数据；多用于查看系统日志">tail： 查看文件末尾数据；多用于查看系统日志</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -n 15 <span class="hljs-built_in">test</span> //查看<span class="hljs-built_in">test</span>文件的末尾15行<br><span class="hljs-built_in">tail</span> <span class="hljs-built_in">test</span> //默认输出末尾10行<br></code></pre></td></tr></table></figure><h2 id="管道">管道: |</h2><p>查看/etc目录下的文件，并将结果分页显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> /etc | more<br></code></pre></td></tr></table></figure><p>查看系统中已安装软件中软件名包含字符’a’的所有软件，输出结果分页显示</p><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smalltalk">dpkg -l | grep a | more<br></code></pre></td></tr></table></figure><h2 id="数据流">数据流</h2><p>标准输入(stdin)，标准输出(stdout)，标准错误输出(stderr)</p><ol><li><code>/dev/stdin</code> 标准输入 <code>0</code></li><li><code>/dev/stdout</code> 标准输出 <code>1</code></li><li><code>/dev/stderr</code> 标准错误输出 <code>2</code></li></ol><h3 id="数据流重定向">数据流重定向</h3><h4 id="输出重定向">输出重定向</h4><p><img src="https://uploadfiles.nowcoder.com/images/20210320/369118006_1616226631099/4D94653967AF1C5CDB3E74A0480E6419" alt="图片说明" title="图片标题"></p><p>以长格式形式列出/etc目录下文件信息，并将其重定向到文件right中</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> /etc &gt; <span class="hljs-keyword">right</span><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> <span class="hljs-keyword">right</span> &lt;=查看新建文件<br></code></pre></td></tr></table></figure><p>查看计算机网卡信息并将结果输出到文件right中</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">ifconfig &gt;&gt; <span class="hljs-built_in">right</span><br></code></pre></td></tr></table></figure><p>命令运行正确时重定向到right,出错时重定向到error</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etca &gt;right 2&gt;error<br></code></pre></td></tr></table></figure><p>特殊用法：<br><img src="https://uploadfiles.nowcoder.com/images/20210320/369118006_1616227227623/D0569403B285BDACCEA0F87EED480350" alt="图片说明" title="图片标题"></p><p>将ls命令运行结果重定向到right_error （覆盖）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etc &gt;right_error 2&gt;&amp;1<br><span class="hljs-built_in">ls</span> -l /etc &amp;&gt;right_error<br></code></pre></td></tr></table></figure><p>将ls命令运行结果重定向到right_error （追加）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etc &gt;&gt;right_error 2&gt;&amp;1<br><span class="hljs-built_in">ls</span> -l /etc &amp;&gt;&gt;right_error<br></code></pre></td></tr></table></figure><h4 id="输入重定向-wc">输入重定向: wc</h4><ol><li>-l 统计行数</li><li>-w 统计单词数</li><li>-c 统计字节数<br>统计文件test的行数、单词数以及字节数</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">wc</span> &lt; <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><h2 id="文本处理">文本处理</h2><h3 id="文本排序-sort-字典顺序">文本排序 sort(字典顺序)</h3><ol><li>-n 按数值大小排序</li><li>-u 对排序后相同的行只保留一行</li><li>-r 按逆序输出排序结果</li></ol><p>对文件file1以倒序形式排序并显示在屏幕上</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">sort</span> –<span class="hljs-built_in">r</span> file1或 <span class="hljs-built_in">cat</span> file1 | <span class="hljs-built_in">sort</span> <span class="hljs-literal">-r</span><br></code></pre></td></tr></table></figure><p>对文件file1排序并删掉重复的行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> –u file1   或 <span class="hljs-built_in">cat</span> file1 | <span class="hljs-built_in">sort</span> -u<br></code></pre></td></tr></table></figure><p>对数值文件file2按数值从小到大进行排序</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span> –n file2 或 <span class="hljs-built_in">cat</span> file2 | <span class="hljs-built_in">sort</span> -n<br></code></pre></td></tr></table></figure><h3 id="文本去重-uniq">文本去重 uniq</h3><ol><li>-d 只显示重复行</li><li>-u 只显示不重复行</li><li>-c 显示重复出现的次数</li></ol><p>使用uniq命令对文件file1去重后输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span><br></code></pre></td></tr></table></figure><p>查看文件file1中重复的数据内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span> -d<br></code></pre></td></tr></table></figure><p>查看文件file1中不重复的数据内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sort</span>  file1 | <span class="hljs-built_in">uniq</span> -u 来显示当前工作目录的<br></code></pre></td></tr></table></figure><h3 id="文本查找-grep">文本查找 grep</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">grep <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[字符串]</span> 文件名<br></code></pre></td></tr></table></figure><ol><li>-c 只显示匹配的行数</li><li>-l 忽略字母大小写</li><li>-n 输出时加行号</li><li>-v 反转查找</li></ol><p>在/etc/adduser.conf文件中，查找含有adduser字符的行</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> adduser <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>在adduser.conf文件中，查找不含&quot;#&quot;的行并列出行号</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -vn <span class="hljs-string">&quot;#&quot;</span> <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>在adduser.conf文件中，查找含有adduser字符的行数</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">grep</span> -c  adduser  <span class="hljs-regexp">/etc/</span>adduser.conf<br></code></pre></td></tr></table></figure><p>##文本剪切 cut</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">cut</span> <span class="hljs-operator">-</span><span class="hljs-variable">f</span> <span class="hljs-built_in">List</span> <span class="hljs-operator">-</span><span class="hljs-variable">d</span> <span class="hljs-built_in">Character</span> 文件<br></code></pre></td></tr></table></figure><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">-f 获取被定界符隔开后指定的字段列表 `f代表field`<br> -d 指定分隔字符 `d代表delimeter`<br></code></pre></td></tr></table></figure><p><img src="https://uploadfiles.nowcoder.com/images/20210322/369118006_1616421511145/9A0C1B38D99D7EB1E8AA3DBA396CB981" alt="图片说明" title="图片标题"></p><h3 id="文本比较-diff">文本比较 diff</h3><ol><li>-c 以context模式显示比较的结果，相对normal</li><li>-y 以并列的方式显示文件的异同之处</li><li>-w 与选项-y一起使用，指定列宽</li></ol><h4 id="diff命令–context模式">diff命令–context模式</h4><br /><h2 id="文件查找">文件查找</h2><h4 id="find-在硬盘上查找文件或目录"><code>find</code> 在硬盘上查找文件或目录</h4><p>在当前目录下，查找属于user01用户的文件和目录</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">find . -<span class="hljs-keyword">user</span> <span class="hljs-title">user01</span><br></code></pre></td></tr></table></figure><p>查找当前目录及其子目录下所有最近2天内更新过的文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> . -ctime -2<br></code></pre></td></tr></table></figure><h4 id="locate-后台数据库中按文件名搜索"><code>locate</code> 后台数据库中按文件名搜索</h4><p>-n 显示查找结果的个数</p><p>查找前3个文件passwd所在位置</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">locate</span> -n <span class="hljs-number">3</span> passwd<br></code></pre></td></tr></table></figure><ol><li>对于刚建立的文件，立即使用locate进行查找将会搜索不到所创建的文件，因为后台数据库一天更新一次；</li><li>若想使刚创建的文件能被立即搜索到，必须以root登陆，然后运行updatedb命令更新数据库。</li></ol><h4 id="查找指定文件位置-whereis">查找指定文件位置: whereis</h4><ol><li>-b 只查找二进制文件</li><li>-m 只查找说明文件</li><li>-s 只查找源代码文件</li></ol><br /><h2 id="文件压缩">文件压缩</h2><h4 id="gzip">gzip</h4><ol><li>-c 将输出写到标准输出上，并保留原有文件</li><li>-d 将压缩文件解压</li><li>-r 递归式地查找指定目录并压缩，解压缩</li></ol><p>用gzip命令将/home/lisi目录下的文件压缩</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## gzip /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>用命令将/home/lisi目录下所有的.gz文件解压缩</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># gzip -d /home/lisi/*</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"><span class="hljs-comment"># gunzip /home/lisi/*</span></span><br></code></pre></td></tr></table></figure><h4 id="bzip2-压缩效果略好于gzip">bzip2(压缩效果略好于gzip)</h4><ol><li>-d 解压缩选项</li><li>-v 显示压缩或解压缩的过程</li><li>-f 当文件重名时，进行覆盖</li></ol><p>使用bzip2命令压缩/home/lisi/目录下的文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## bzip2 /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>使用bzip2命令解压缩/home/lisi/目录下的文件</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## bzip2 -d /home/lisi<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><h4 id="tar包">tar包</h4><p>将多个文件或目录打包成一个文件</p><ol><li>-z 用**<code>gzip</code>**命令进行压缩/解压缩</li><li>-j 通过**<code>bzip2</code>**命令进行压缩/解压缩</li><li>-C 指定解压目录</li><li>-c (压缩)创建新的备份文件，备份目录或文件时必选项(压缩)</li><li>-f 对普通文件进行操作（必选）</li><li>-r 向备份档文件追加文件</li><li>-x (解压缩)从备份档文件中解出文件</li><li>-t 列出备份文档中所含的文件</li><li>-v 列出处理过程中的详细信息</li></ol><br /><p>把/boot目录下文件和子目录打包，打包文件名为usr.tar</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -cvf usr.tar /boot<br></code></pre></td></tr></table></figure><p>把/boot目录下文件和子目录打包，并用gzip算法进行压缩，文件名为usr.tar.gz</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -zcvf usr.tar.gz /boot<br></code></pre></td></tr></table></figure><p>把usr.tar.gz这个打包文件还原并解压缩</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -zxvf usr.tar.gz<br></code></pre></td></tr></table></figure><p>把/boot目录下的文件和子目录打包，并用bzip2算法进行压缩，文件名为usr.tar.bz2</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -jcvf /boot usr.tar.bz2<br></code></pre></td></tr></table></figure><p>把usr.tar.bz2解压缩到目录/tmp</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -jxvf usr.tar.bz2 -C /tmp<br></code></pre></td></tr></table></figure><p>查看usr.tar备份文件的内容，并显示在显示器上</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -tvf usr.tar<br></code></pre></td></tr></table></figure><p>将文件/root/abc/d添加到usr.tar包里面去</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">## tar -rvf usr.tar /root/abc/d<br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/greamrod/p/12488346.html">tar参考</a></p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hadoop命令</title>
    <link href="/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AEhadoop%E5%91%BD%E4%BB%A4/"/>
    <url>/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AEhadoop%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs gradle">gedit <span class="hljs-regexp">/home/</span>hadoop/.bashrc<br><br>.<span class="hljs-regexp">/hadoop/</span>sbin/start-all.sh<br><br>.<span class="hljs-regexp">/hadoop/</span>sbin/stop-all.sh <br><br>scp -r <span class="hljs-regexp">/home/</span>hadoop<span class="hljs-regexp">/phoenix hadoop3:/</span>home<span class="hljs-regexp">/hadoop/</span><br><br>zkServer.sh start<br>zkServer.sh stop<br><br>zookeeper<span class="hljs-regexp">/bin/</span>zkCli.sh -server hadoop1:<span class="hljs-number">2181</span><br><br>zookeeper<span class="hljs-regexp">/bin/</span>zkServer.sh status<br><br>hbase<span class="hljs-regexp">/bin/</span>start-hbase.sh<br>hbase<span class="hljs-regexp">/bin/</span>stop-hbase.sh<br><br>hadoop fs -ls -R -h /user<br>hadoop fs -mkdir -p <span class="hljs-regexp">/user/</span>hadoop/demo<br>hadoop fs -mv <span class="hljs-regexp">/user/</span>hadoop<span class="hljs-regexp">/demo.txt /u</span>ser<span class="hljs-regexp">/hadoop/</span>demo/demo.txt<br><br>phoenix<span class="hljs-regexp">/bin/</span>sqlline.py hadoop1,hadoop2,hadoop3:<span class="hljs-number">2181</span><br>SELECT * <span class="hljs-keyword">FROM</span> STUDENT LIMIT <span class="hljs-number">1000</span>;<br><br><span class="hljs-regexp">/etc/i</span>nit.d/mysqld start<br>mysql -u root –p<br>mysql -h localhost -u root -p<br><br>create table myclass(<br>id <span class="hljs-keyword">int</span>(<span class="hljs-number">4</span>) not <span class="hljs-keyword">null</span> primary key auto_increment,<br>name <span class="hljs-keyword">char</span>(<span class="hljs-number">20</span>) not <span class="hljs-keyword">null</span>,<br>sex <span class="hljs-keyword">int</span>(<span class="hljs-number">4</span>) not <span class="hljs-keyword">null</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&#x27;0&#x27;</span>,<br>degree <span class="hljs-keyword">double</span>(<span class="hljs-number">16</span>,<span class="hljs-number">2</span>));<br><br>schematool -dbType mysql –initSchema  (创建hive元数据表)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux日常管理与维护</title>
    <link href="/2023/03/20/Linux%E6%97%A5%E5%B8%B8%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4/"/>
    <url>/2023/03/20/Linux%E6%97%A5%E5%B8%B8%E7%AE%A1%E7%90%86%E4%B8%8E%E7%BB%B4%E6%8A%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="任务计划">任务计划</h2><p>若希望在固定时间触发某个作业，就需要创建任务计划，按时执行该作业</p><h4 id="cron实现任务计划方式">cron实现任务计划方式</h4><ol><li>可通过修改/etc/crontab文件<br>root用户通过修改/etc/crontab文件可以实现任务计划，而普通用户却无法修改<br>2.使用crontab命令实现</li></ol><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">SHELL</span>=<span class="hljs-regexp">/bin/bash</span><br><span class="hljs-variable constant_">PATH</span>=<span class="hljs-regexp">/sbin:/bin</span><span class="hljs-symbol">:/usr/sbin</span><span class="hljs-symbol">:/usr/bin</span><br><span class="hljs-variable constant_">MAILTO</span>=root<br><span class="hljs-comment"># Example of job definition:</span><br><span class="hljs-comment"># .---------------- minute (0 - 59)</span><br><span class="hljs-comment"># |  .------------- hour (0 - 23)</span><br><span class="hljs-comment"># |  |  .---------- day of month (1 - 31)</span><br><span class="hljs-comment"># |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-comment"># |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-comment"># |  |  |  |  |</span><br><span class="hljs-comment"># *  *  *  *  * user-name command to be executed</span><br></code></pre></td></tr></table></figure><br><table><thead><tr><th style="text-align:center">内容</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">minute</td><td>分钟，0～59之间的任何整数</td></tr><tr><td style="text-align:center">hour</td><td>小时，0～23之间的任何整数</td></tr><tr><td style="text-align:center">day</td><td>日期，从 1～31之间的任何整数（如果指定了月份，必须是该月份的有效日期）</td></tr><tr><td style="text-align:center">month</td><td>月份，1～12之间的任何整数（或使用月份的英文简写如jan、feb等</td></tr><tr><td style="text-align:center">day of week</td><td>星期，0～7之间的任何整数，这里的0或7代表星期日（或使用星期的英文简写如sun、mon等）</td></tr><tr><td style="text-align:center">user-name</td><td>执行命令的用户</td></tr><tr><td style="text-align:center">command</td><td>要执行的命令或者是自己编写的脚本</td></tr></tbody></table><br><table><thead><tr><th style="text-align:center">时间格式</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>可以用来代表所有有效的值。如月份值中的星号意味着在满足其它制约条件后每月都执行该命令</td></tr><tr><td style="text-align:center">-</td><td>指定一个整数范围。比如1-4意味着整数1、2、3、4</td></tr><tr><td style="text-align:center">,</td><td>指定隔开的一系列值指定一个列表。比如3,4,6,8标明这4个指定的整数</td></tr><tr><td style="text-align:center">/</td><td>可以用来指定间隔频率。在范围后加上/<integer>意味着在范围内可以跳过integer。如“0-59/2”可以用来在分钟字段上定义时间间隔为两分钟。间隔频率值还可以和星号一起使用，如“*/3”的值可以用在月份字段中表示每3个月运行一次任务。</td></tr></tbody></table><br><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs awk">SHELL=<span class="hljs-regexp">/bin/</span>bash<br>PATH=<span class="hljs-regexp">/sbin:/</span>bin:<span class="hljs-regexp">/usr/</span>sbin:<span class="hljs-regexp">/usr/</span>bin<br>MAILTO=root<br><br><span class="hljs-regexp">//</span>在每星期六的<span class="hljs-number">23</span>:<span class="hljs-number">00</span>执行 <span class="hljs-regexp">/root/</span>backup.sh<br><span class="hljs-number">0</span> <span class="hljs-number">23</span> * * <span class="hljs-number">6</span> root <span class="hljs-regexp">/root/</span>backup.sh<br><br><span class="hljs-regexp">//</span>在每天<span class="hljs-number">18</span>:<span class="hljs-number">00</span>～<span class="hljs-number">23</span>:<span class="hljs-number">00</span>之间每隔<span class="hljs-number">30</span>分钟执行<span class="hljs-regexp">/root/</span>backup.sh<br><span class="hljs-number">0</span>,<span class="hljs-number">30</span> <span class="hljs-number">18</span>-<span class="hljs-number">23</span> * * * root <span class="hljs-regexp">/root/</span>backup.sh<br><br><span class="hljs-regexp">//</span>每隔<span class="hljs-number">2</span>月，在晚上的<span class="hljs-number">21</span>:<span class="hljs-number">30</span>执行<span class="hljs-regexp">/root/</span>backup.sh文件<br><span class="hljs-number">30</span> <span class="hljs-number">21</span> * *<span class="hljs-regexp">/2 * root /</span>root/backup.sh<br></code></pre></td></tr></table></figure><br><h4 id="backup-sh文件-备份文件">backup.sh文件(备份文件)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment">#对/boot目录进行备份，备份文件名称包括备份时具体时间</span><br><br>tar -zcvf ~/boot _$(<span class="hljs-built_in">date</span> -d <span class="hljs-string">&quot;today&quot;</span> +<span class="hljs-string">&quot;%Y%m%d_%H%M&quot;</span>).tar.gz /boot<br></code></pre></td></tr></table></figure><p>每天晚上1:00读取/var/log/auth.log文件的后100行内容追加到文件/root/auth.log</p><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span><span class="hljs-number">1</span> * * * root tail -<span class="hljs-number">100</span> /var/<span class="hljs-keyword">log</span>/auth.<span class="hljs-keyword">log</span> &gt;&gt; /root/auth.<span class="hljs-keyword">log</span><br></code></pre></td></tr></table></figure><br><h3 id="普通用户任务计划">普通用户任务计划</h3><h4 id="root以外的用户可用crontab命令配置cron任务">root以外的用户可用crontab命令配置cron任务</h4><ol><li>登录然后输入crontab -e命令</li><li>编辑crontab，编辑格式和/etc/crontab相同</li><li>当对crontab所做的改变被保存后（输入:wq），该crontab文件会根据该用户名被保chun在 /var/spool/cron/<username> 文件中</li></ol><h4 id="crond守护进程工作">crond守护进程工作</h4><p>1.每分钟都检查/etc/crontab文件、/etc/cron.d目录以及/var/spool/cron目录中的变化。<br>2.如果发现了改变，它们就会被载入内存</p><h4 id="列出crontab">列出crontab</h4><p>以root用户列出ruby的crontab</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@ubuntu</span> ~<span class="hljs-meta"># crontab -u ruby -l</span><br></code></pre></td></tr></table></figure><p>以普通用户ruby列出自己的crontab</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crystal">ruby<span class="hljs-variable">@ubuntu</span> ~<span class="hljs-variable">$ </span>crontab -l<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux进程管理</title>
    <link href="/2023/03/20/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    <url>/2023/03/20/Linux%E8%BF%9B%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h2 id="进程-VS-程序、作业">进程 VS 程序、作业</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">程序是一个静态的命令集合，不占系统运行资源；（源代码，<span class="hljs-keyword">CD</span>）<br>进程是一个随时都可能发生变化的、动态的、使用系统运行资源的程序；（正在运行，播放<span class="hljs-keyword">CD</span>）<br>一个程序可以启动多个进程；<br>作业是一系列按一定顺序执行的命令，可能会涉及到多个进程；（<span class="hljs-keyword">shell</span>脚本）<br></code></pre></td></tr></table></figure><h2 id="进程特征">进程特征</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">动态性：进程的实质是程序在多道程序系统中的一次执行过程，进程是动态产生、动态消亡的<br>并发性：任何进程都可以同其它进程一起并发执行<br>独立性：进程是一个能独立运行的基本单位，同时也是系统分配资源和调度的独立单位<br>异步性：由于进程间的相互制约，使得进程具有执行的间断性，即进程按各自独立的、不可预知的速度向前推进<br>结构特征：进程由程序、数据和进程控制块三部分组成<br>多个不同的进程可以包含相同的程序：一个程序在不同的数据集里就构成不同的进程，能得到不同的结果；但是执行过程中，程序不能发生改变<br></code></pre></td></tr></table></figure><h2 id="进程种类">进程种类</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">交互式进程：一个由<span class="hljs-keyword">Shell</span><span class="language-bash">启动并控制的进程，交互式进程既可在前台运行，也可在后台运行</span><br>批处理进程：与终端无关，安排在指定时刻完成的一系列进程<br>守护进程：在引导系统时启动，以执行即时的操作系统任务，比如crond、rsyslogd、named等<br>监听状态的进程<br></code></pre></td></tr></table></figure><h2 id="查看系统进程信息">查看系统进程信息</h2><h3 id="进程查看命令-–-ps-命令">进程查看命令 – ps 命令</h3><p>ps [可选项]</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-a显示所有进程，包括其他用户的进程</span><br><span class="hljs-deletion">-u显示基于用户的信息</span><br><span class="hljs-deletion">-x显示所有进程，不以终端来区分</span><br><span class="hljs-deletion">-t tty显示属于指定终端tty的进程</span><br><span class="hljs-deletion">-U user显示user用户所拥有的进程</span><br></code></pre></td></tr></table></figure><p>查看每位用户的全部进程</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos">ps -<span class="hljs-built_in">aux</span><br></code></pre></td></tr></table></figure><p>查看当前进程状况</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ps</span> –u root<br></code></pre></td></tr></table></figure><p>查看tty1终端下的进程</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ps –<span class="hljs-built_in">t</span> tty1<br></code></pre></td></tr></table></figure><p>查看进程号为1659的进程  (PID)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ps</span> –p <span class="hljs-number">1659</span><br></code></pre></td></tr></table></figure><p>在命令行运行bash命令创建一个子进程  (PPID)</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs vim">bash<br>pstree -<span class="hljs-keyword">p</span> | <span class="hljs-keyword">grep</span> bash<br><br><span class="hljs-keyword">ps</span> –axj   可以查看系统中各进程的父进程<br></code></pre></td></tr></table></figure><br><p>ps命令输出字段的含义<br><img src="https://uploadfiles.nowcoder.com/images/20210621/369118006_1624262354736/1B392EF6ADD6BFEB354D342EA47EB89C" alt="图片说明" title="图片标题"></p><br><h3 id="系统监控命令-–-top-命令">系统监控命令 – top 命令</h3><p>top [可选项]</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-c：显示每个程序的完整指令</span><br><span class="hljs-deletion">-d &lt;间隔秒数&gt;：设置top执行状况的间隔时间，单位以秒计算</span><br><span class="hljs-deletion">-n &lt;执行次数&gt;：设置监控信息的更新次数</span><br></code></pre></td></tr></table></figure><p>在执行top的过程中排序</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet">shift + <span class="hljs-comment">&#x27;&#x27;</span><br><span class="hljs-symbol">A:</span>以执行的先后顺序排序<br><span class="hljs-symbol">T:</span>由启动的时间进行排序<br><span class="hljs-symbol">M:</span>以所占的内存大小排序<br><span class="hljs-symbol">P:</span>以所耗用的CPU资源排序<br></code></pre></td></tr></table></figure><p>只显示进程号为1659的进程</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">top</span> –<span class="hljs-selector-tag">p</span> <span class="hljs-number">1659</span><br></code></pre></td></tr></table></figure><p>只显示root用户的进程</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span> –u root<br></code></pre></td></tr></table></figure><h3 id="进程终止">进程终止</h3><h4 id="前台进程-Ctrl-C">前台进程:  [Ctrl+C]</h4><h4 id="后台进程-kill命令">后台进程:  kill命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">无条件<span class="hljs-built_in">kill</span>命令： <span class="hljs-built_in">kill</span> -9 &lt;PID&gt;<br>结束所有的后台进程：<span class="hljs-built_in">kill</span> 0<br></code></pre></td></tr></table></figure><p>终止系统中的named进程</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell">先使用<span class="hljs-built_in">ps</span>命令查看进程，得到named进程对应的PID（<span class="hljs-number">3576</span>），使用<span class="hljs-built_in">kill</span>命令来终止此进程<br><span class="hljs-comment"># ps -aux | grep named</span><br><span class="hljs-comment"># kill 3576</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux网络基本配置</title>
    <link href="/2023/03/20/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/03/20/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="常用网络配置文件">常用网络配置文件</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/etc/</span>network/interfaces文件——&gt;静态IP地址配置<br><span class="hljs-regexp">/etc/</span>resolv.conf文件<br><span class="hljs-regexp">/etc/</span>hosts文件<br><span class="hljs-regexp">/etc/</span>services文件<br><span class="hljs-regexp">/etc/</span>hostname 文件——&gt;修改主机名<br></code></pre></td></tr></table></figure><h2 id="常用网络命令">常用网络命令</h2><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">ifconfig</span>  ——&gt;查看<span class="hljs-built_in">IP</span>地址<br><span class="hljs-symbol">ip</span> <span class="hljs-keyword">addr</span>   ——&gt;查看<span class="hljs-built_in">IP</span>地址<br><span class="hljs-symbol">ping</span>      ——&gt;测试与目的地的连通性<br><span class="hljs-symbol">traceroute</span> ——&gt;测试如何到达目的地<br><span class="hljs-symbol">netstat</span>   ——&gt;当前网络状态<br></code></pre></td></tr></table></figure><h3 id="ifconfig命令">ifconfig命令</h3><p>使用ifconfig命令可以显示和配置网络接口，比如设置IP地址、MAC地址、激活或关闭网络接口</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ifconfig  <span class="hljs-selector-attr">[接口]</span> <span class="hljs-selector-attr">[选项|IP地址]</span> <br></code></pre></td></tr></table></figure><p>配置网卡ens33的IP地址， 同时激活该设备</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33 <span class="hljs-number">192.168.237.140</span> netmask <span class="hljs-number">255.255.255.0</span> up<br></code></pre></td></tr></table></figure><p>配置网卡ens33别名设备ens33:1的IP地址</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33:<span class="hljs-number">1</span> <span class="hljs-number">192.168.237.140</span><br></code></pre></td></tr></table></figure><p>激活网卡ens33:1设备</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33:<span class="hljs-number">1</span> up<br></code></pre></td></tr></table></figure><p>查看网卡ens33网络接口的配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33<br></code></pre></td></tr></table></figure><p>查看所有的网卡网络接口配置</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">ifconfig</span> <br></code></pre></td></tr></table></figure><h3 id="ping命令">ping命令</h3><p>使用ping命令可用于测试与目标计算机之间的连通性</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">ping <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[目标]</span><br></code></pre></td></tr></table></figure><p>测试与网站www.sina.com.cn的连通性</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">ping www<span class="hljs-selector-class">.sina</span><span class="hljs-selector-class">.com</span>.cn<br></code></pre></td></tr></table></figure><p>测试与192.168.237.149计算机的连通性，每次发送的ICMP数据包大小为128字节(默认字节数为56)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping</span> -s <span class="hljs-number">128</span> <span class="hljs-number">192.168.237.149</span><br></code></pre></td></tr></table></figure><p>测试与192.168.237.149计算机的连通性，要求返回4个ICMP数据包</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ping</span> -c <span class="hljs-number">4</span> <span class="hljs-number">192.168.237.149</span><br></code></pre></td></tr></table></figure><h3 id="traceroute命令">traceroute命令</h3><p>使用traceroute命令可以显示数据包到目标主机之间的路径</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">traceroute <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[主机名|IP地址]</span> <span class="hljs-selector-attr">[数据包大小]</span><br></code></pre></td></tr></table></figure><p>跟踪从本地计算机到www.163.com网站的路径</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">traceroute</span> www.<span class="hljs-number">163</span>.com<br></code></pre></td></tr></table></figure><p>关闭网卡ens33设备</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">ifconfig</span> ens33 down<br></code></pre></td></tr></table></figure><p>更改网卡ens33的硬件MAC地址为00:0C:29:18:2E:3D</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ifconfig</span> ens33 hw ether <span class="hljs-number">00</span>:<span class="hljs-number">0</span>C:<span class="hljs-number">29</span>:<span class="hljs-number">18</span>:<span class="hljs-number">2</span>E:<span class="hljs-number">3</span>D<br></code></pre></td></tr></table></figure><h3 id="netstat命令">netstat命令</h3><p>使用netstat命令可显示网络状态信息，得知整个Linux系统的网络情况，比如网络连接、路由表、接口统计、伪装连接和组播成员</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">netstat <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[延迟]</span><br></code></pre></td></tr></table></figure><p>显示内核路由表信息</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">netstat -r</span><br></code></pre></td></tr></table></figure><p>显示端口号为22的连接情况。</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">netstat -antu<span class="hljs-string">| grep 22</span><br></code></pre></td></tr></table></figure><h2 id="管理网络服务">管理网络服务</h2><p>管理Linux系统服务方法有很多，最常用的是systemctl命令，它是RHEL7（CentOS 7）系统中新的管理服务命令，用来替代chkconfig和service命令</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">systemctl <span class="hljs-selector-attr">[选项]</span> <span class="hljs-selector-attr">[单元命令|单元文件命令]</span><br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-params">system</span>ctl start sshd.service<br><span class="hljs-params">system</span>ctl status sshd.service<br><span class="hljs-params">system</span>ctl stop sshd.service<br><span class="hljs-params">system</span>ctl restart sshd.service<br><span class="hljs-params">system</span>ctl reload sshd.service<br><span class="hljs-params">system</span>ctl enable sshd.service<br><span class="hljs-params">system</span>ctl is-enabled sshd.service<br><span class="hljs-params">system</span>ctl disable sshd.service<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux面试</title>
    <link href="/2023/03/20/Linux%E9%9D%A2%E8%AF%95/"/>
    <url>/2023/03/20/Linux%E9%9D%A2%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="常用高级命令">常用高级命令</h2><h5 id="查看进程">查看进程</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs diff">ps -ef / ps -aux<br><span class="hljs-deletion">-a 显示所有用户的进程</span><br><span class="hljs-deletion">-u 显示用户名和启动时间</span><br><span class="hljs-deletion">-x 显示所有进程，包括没有控制终端的进程</span><br><span class="hljs-deletion">-e 显示所有进程，包括没有控制终端的进程，较x选项，信息更为简略</span><br><span class="hljs-deletion">-l 显示进程详细信息，按长格式显示</span><br></code></pre></td></tr></table></figure><h5 id="查看端口号">查看端口号</h5><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs diff">natstat -anp<br><span class="hljs-deletion">-a 显示所有</span><br><span class="hljs-deletion">-n 只用数字显示，不用别名</span><br><span class="hljs-deletion">-p 显示进程号和进程名</span><br></code></pre></td></tr></table></figure><h5 id="查看磁盘使用情况">查看磁盘使用情况</h5><p><code>df -h</code></p><h5 id="查看某个进程内存">查看某个进程内存</h5><p><code>jmap -heap</code></p><h2 id="shell">shell</h2><h5 id="awk">awk</h5><h5 id="sed">sed</h5><h5 id="sort">sort</h5><h5 id="cut">cut</h5><h5 id="启停脚本">启停脚本</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#！/bin/bash</span><br><span class="hljs-keyword">case</span> <span class="hljs-variable">$1</span> <span class="hljs-keyword">in</span><br><span class="hljs-string">&quot;start&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> hadoop1 hadoop2 hadoop3<br><span class="hljs-keyword">do</span> <br>ssh <span class="hljs-variable">$i</span> <span class="hljs-string">&quot;绝对路径&quot;</span><br><span class="hljs-keyword">done</span><br>;;<br><span class="hljs-string">&quot;stop&quot;</span>)<br><br>;;<br><span class="hljs-keyword">esac</span><br></code></pre></td></tr></table></figure><h5 id="引号">引号</h5><p>‘’ 不解析里面变量的值</p><p>“” 解析里面变量的值</p><p>嵌套：看谁在最外面</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/2023/03/20/Redis/"/>
    <url>/2023/03/20/Redis/</url>
    
    <content type="html"><![CDATA[<h3 id="Redis工作原理">Redis工作原理</h3><p>key-value存储系统，它支持的value类型相对较多，包括string、list、set、zset，这些数据都支持push/pop/add/remove及交并补等操作，而且这些操作都是<strong>原子性</strong>的，在此基础上，Redis支持各种不同方式的排序。为了保证效率，数据是缓存在<strong>内存</strong>中的，Redis会周期性的把数据写入磁盘或者把修改操作写入追加的记录文件，并在此基础上实现了master-slave同步</p><h3 id="Redis持久化-RDB">Redis持久化-RDB</h3><p>在Redis运行时，RDB程序将当前内存中的数据库快照保存到磁盘中，当Redis需要重启时，RDB程序会通过重载RDB文件来还原数据库</p><h6 id="保存（rdbSave）">保存（rdbSave）</h6><p>rdbSave负责将内存中的数据库数据以RDB格式保存到磁盘中，如果RDB文件已经存在将会替换已有的RDB文件。保存RDB文件期间会阻塞主进程，这段时间期间将不能处理新的客户端请求，直到保存完成为止。</p><h6 id="读取（rdbLoad）">读取（rdbLoad）</h6><p>当Redis启动时，会根据配置的持久化模式，决定是否读取RDB文件，并将其中的对象加载到内存中。</p><h3 id="Redis持久化-AOF">Redis持久化-AOF</h3><p>以协议文本的方式，将所有对数据库进行的写入命令记录到AOF文件，达到记录数据库状态的目的</p><h6 id="AOF的保存">AOF的保存</h6><ol><li>将客户端请求的命令转换为网络协议格式</li><li>将协议内容字符串追加到变量server.aof_buf中</li><li>当AOF系统达到设定的条件时，会调用aof_fsync(文件描述符号)将数据写入磁盘</li></ol><h6 id="AOF的读取">AOF的读取</h6><ol><li>AOF保存的是数据协议格式的数据，所以只要将AOF中的数据转换为命令，模拟客户端重新执行一遍，就可以还原所有数据库状态</li><li>创建模拟的客户端</li><li>读取AOF保存的文本，还原数据为原命令和原参数。然后使用模拟的客户端发出这个命令请求</li><li>继续执行第二步，直到读取完AOF文件</li></ol><h6 id="AOF重写流程">AOF重写流程</h6><ol><li>AOF重写完成会向主进程发送一个完成的信号</li><li>会将AOF重写缓存中的数据全部写入到文件中</li><li>用新的AOF文件，覆盖原有的AOF文件</li></ol><h6 id=""></h6>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2023/03/20/mysql/"/>
    <url>/2023/03/20/mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL语句">SQL语句</h2><hr><h4 id="增">增</h4><h6 id="创建用户：">创建用户：</h6><p><code>create user [用户名]@'%' identified by '123456' </code>;</p><h6 id="创建数据库：">创建数据库：</h6><p><code>create database [数据库名];</code></p><h6 id="创建数据库表：">创建数据库表：</h6><p><code>create table [表名] (id int, name char(30));</code></p><h6 id="插入数据">插入数据:</h6><p><code>insert into [表名] (id,name,age) values (1,'张三',21);</code></p><hr><h4 id="删">删</h4><h6 id="删除用户">删除用户:</h6><p><code>drop user [用户名]@'%';</code></p><h6 id="删除数据库">删除数据库:</h6><p><code>drop database [数据库名];</code></p><h6 id="删除数据表">删除数据表:</h6><p><code>drop table [表名];</code></p><h6 id="删除数据">删除数据:</h6><p><code>delete from [表名] where id=5;</code></p><p><code>delete from [表名] where age between 23 and 25;</code></p><hr><h4 id="改">改</h4><h6 id="修改表中的数据">修改表中的数据:</h6><p><code>update [表名] set age=21 where id=3;</code></p><h6 id="修改表的名称">修改表的名称:</h6><p><code>alter table [表名] rename [新表名];</code></p><h6 id="修改表的字段类型">修改表的字段类型:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># modify只能更改列定义(数据类型和其他属性)，不能更改列名<br>alter table [表名] modify name char(50);<br>describe [表名];<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># change 可以更改列名称和列定义<br>alter table [表名] change name username char(50);<br>describe [表名];<br></code></pre></td></tr></table></figure><h6 id="添加删除字段">添加删除字段:</h6><p><code>alter table [表名] add time datetime;</code></p><p><code>alter table [表名] drop time;</code></p><hr><h4 id="查">查</h4><h6 id="查看所有数据库">查看所有数据库:</h6><p><code>show databases;</code></p><h6 id="查看指定库内所有数据表">查看指定库内所有数据表:</h6><p><code>show tables;</code></p><h6 id="查看指定数据表的字段结构">查看指定数据表的字段结构:</h6><p><code>describe [表名];</code></p><h6 id="查看所有MySQL用户密码及登录方式">查看所有MySQL用户密码及登录方式:</h6><p><code>select User,Password,Host from mysql.user;</code></p><h6 id="例子">例子:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 库表 student.report<br># 查询姓李的同学的个数<br>select count(*) from student.report where Name like &#x27;李%&#x27;;<br># 查询表中成绩大于80的前2名同学的名字，并按分数从大到小的顺序排列<br>select Result from report ORDER BY Result DESC limit 2;<br></code></pre></td></tr></table></figure><hr><h4 id="授权">授权</h4><h6 id="授予用户全部权限">授予用户全部权限:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"># 给已存在用户授权<br>grant  all on [库名].[表名] to [用户名]@&#x27;%&#x27;;<br><br># 创建用户并授权<br>grant  all on [库名].[表名] to [用户名]@&#x27;%&#x27; identified by &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><h6 id="取消用户的删除库、表、表中数据的权限">取消用户的删除库、表、表中数据的权限:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql"> # 取消删除权限<br>revoke drop,delete on [库名].[表名] from [用户名]@&#x27;%&#x27;;<br><br># 查看指定用户的授权<br>show grants for [用户名]@&#x27;%&#x27;;<br></code></pre></td></tr></table></figure><hr><h4 id="启动关闭">启动关闭</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># CentOS 6 及更早的版本中使用 service 命令来管理MySQL服务</span><br>service mysqld start<br>service mysqld stop<br>service mysqld restart<br>service mysqld status<br><br><span class="hljs-comment"># CentOS 7 或更新版本使用 systemctl 命令来管理MySQL服务</span><br>sudo systemctl start mysql  <span class="hljs-comment"># systemctl start mysqld.service</span><br>sudo systemctl stop mysql<br>sudo systemctl restart mysql<br>sudo systemctl status mysql<br><br><span class="hljs-comment"># 如果MySQL服务已经安装但没有作为系统服务运行，则可以使用以下命令手动启动和关闭MySQL服务</span><br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql start<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql stop<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql restart<br>sudo <span class="hljs-regexp">/etc/i</span>nit.d/mysql status<br><br><span class="hljs-comment"># 登录数据库</span><br>mysql -uroot -p<br></code></pre></td></tr></table></figure><hr><h2 id="MySQL集群">MySQL集群</h2><hr><h5 id="MySQL主从工作原理">MySQL主从工作原理</h5><p>技术点：bin-log日志</p><p>开启主服务器的bin-log日志记录功能，将主服务器的bin-log日志传到从服务器，从服务器根据日志内容将数据还原到本地。</p><p><em>从服务器主动把主服务器上的数据同步到本地（备份）</em></p><p><img src="https://img01.anzhiy.cn/useruploads/114/2023/03/20/64187f13e831a.png" alt=""></p><h5 id="主从故障切换">主从故障切换</h5><p>从服务器切换为主服务器</p><ul><li><p>登陆所有从服务器查看POST信息，使用POST最大的作为新的主服务器</p></li><li><p>对该服务器执行<code>stop slave</code></p></li><li><p>修改 my.cnf 配置文件，开启该服务器的log-bin并重新启动数据库服务</p></li><li><p>登陆数据库执行<code>restet master,  show master status</code>查看主库信息</p><p>创建授权,同步用户与权限,修改对应服务器的IP地址等信息</p></li><li><p>登陆其它从库，执行change master操作，查看同步状态</p></li></ul><h5 id="数据库代理工具-Amoeba">数据库代理工具: Amoeba</h5><p>Amoeba致力于MySQL的分布式数据库前端代理层，它主要在应用层访问MySQL的时候充当SQL路由功能，专注于分布式数据库代理层（Database Proxy）开发。具有负载均衡、高可用、SQL过滤、读写分离、数据切片的功能。</p><p><img src="https://img01.anzhiy.cn/useruploads/114/2023/03/20/64187f13e8481.png" alt=""></p><h2 id="MySQL索引">MySQL索引</h2><h5 id="什么是索引">什么是索引</h5><p>在MySQL数据库中，索引是一种用于优化查询性能的关键组件。索引的本质是数据结构，可以加速数据的查找和排序，通过减少磁盘I/O和内存操作来提高查询效率。</p><p>MySQL支持多种类型的索引，包括B-Tree索引、Hash索引、Full-Text索引等。其中，B-Tree索引是最常见的索引类型，也是MySQL默认的索引类型。</p><h5 id="索引的分类">索引的分类</h5><p>主键索引</p><p>单值索引一个索引只包含单个列，一个表可以有多个单列索引。如果字段会被经常用来检索就可以用单值索引。</p><p>复合索引一个索引包含多个列</p><p>唯一索引所有列的值必须唯一，但是允许有空值。</p><p>普通索引和唯一索引可以称为辅助索引</p><h5 id="优势">优势</h5><ol><li>提高查询效率</li><li>减少对数据表的排序操作</li><li>随机IO查询变顺序IO查询</li></ol><h5 id="劣势">劣势</h5><ol><li>实际上索引也是一张表，包含主键和索引字段，并指向实体表的记录，索引列也是要占用空间的</li><li>虽然索引提高了查询速度，但是会降低更新表的速度</li><li>索引只是提高效率的一个因素，建立索引也要花费时间</li></ol><h5 id="什么时候需要创建索引">什么时候需要创建索引</h5><ol><li>主键自动建立唯一索引</li><li>频繁作为查询条件的字段应该创建索引</li><li>查询中与其他表关联的字段，外键关系创建索引</li><li>单键/组合索引的选择问题：在高并发下倾向创建组合索引</li><li>查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度</li><li>查询中统计和分组字段（group by）</li></ol><h5 id="哪些情况不要创建索引">哪些情况不要创建索引</h5><ol><li>频繁更新的字段不适合创建索引</li><li>where条件里用不到的字段不创建索引</li><li>表记录太少，如果才几万条数据，不需要创建索引</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql安装</title>
    <link href="/2023/03/20/mysql%E5%AE%89%E8%A3%85/"/>
    <url>/2023/03/20/mysql%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h1>登录MySQL</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><h1>8.0+安装教程</h1><ol><li>执行以下命令，下载并安装MySQL</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">wget http:<span class="hljs-regexp">//</span>dev.mysql.com<span class="hljs-regexp">/get/my</span>sql80-community-release-el7-<span class="hljs-number">6</span>.noarch.rpm<br>yum -y install mysql80-community-release-el7-<span class="hljs-number">6</span>.noarch.rpm<br>yum -y install mysql-community-server<br></code></pre></td></tr></table></figure><ol start="2"><li>启动MySQL数据库</li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">systemctl <span class="hljs-literal">start</span> mysqld.service<br></code></pre></td></tr></table></figure><ol start="3"><li>查看MySQL初始密码</li></ol><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">grep <span class="hljs-string">&quot;password&quot;</span> /<span class="hljs-keyword">var</span>/<span class="hljs-built_in">log</span>/mysqld.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><ol start="4"><li>登录数据库</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -uroot -<span class="hljs-selector-tag">p</span><br></code></pre></td></tr></table></figure><ol start="5"><li>修改密码安全策略</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">// 临时修改密码<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;Root_12root&#x27;</span>;<br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">policy</span>=0;<br><span class="hljs-built_in">set</span> global validate_password.<span class="hljs-attribute">length</span>=1;<br></code></pre></td></tr></table></figure><ol start="6"><li>修改MySQL默认密码</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br></code></pre></td></tr></table></figure><ol start="7"><li>授予root用户远程管理权限</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> <span class="hljs-keyword">PRIVILEGES</span> <span class="hljs-keyword">ON</span> *.* <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;666666&#x27;</span>;<br></code></pre></td></tr></table></figure><h1>创建数据库</h1><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">CREATE DATABASE <span class="hljs-keyword">new</span><span class="hljs-type">bee_mall_plus_db</span>;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大数据生态</title>
    <link href="/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81/"/>
    <url>/2023/03/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%94%9F%E6%80%81/</url>
    
    <content type="html"><![CDATA[<h3 id="Hadoop生态">Hadoop生态</h3><p>Hadoop分布式系统基础架构</p><p>Hadoop是一个开源的分布式计算框架，可以对大规模数据进行存储和处理。Hadoop采用了分布式文件系统HDFS和分布式计算框架MapReduce，可以将数据划分为多个块并在多台计算机上同时处理，从而实现高效的数据处理和分析。Hadoop适用于处理海量数据、需要高可靠性和高可扩展性的应用场景，比如搜索引擎、数据仓库等。</p><h4 id="入门">入门:</h4><h6 id="1-常用端口号：">1.常用端口号：</h6><p>​2.xhdfs:50070yarn:80889000/8020历史服务器通信端口:19888</p><p>​3.xhdfs:9870yarn:8088内部通讯:9820/9000/8020历史服务器通信端口:19888</p><h6 id="2-常用配置：">2.常用配置：</h6><p>​2.xcore-site.xmlhdfs-site.xmlmapred-site.xmlyarn-site.xmlslaves</p><p>​3.xcore-site.xmlhdfs-site.xmlmapred-site.xmlyarn-site.xmlworkers</p><h4 id="HDFS：">HDFS：</h4><p>HDFS是一个分布式文件系统，用于存储大规模数据集。它将文件分割成数据块，并将这些数据块分布在Hadoop集群中的多个节点上。这种分布式存储方式可以提高数据的可靠性和可用性，同时也可以通过并行处理提高数据的处理效率。</p><p><em>针对的是<strong>文件</strong>的增删改</em></p><h6 id="1-hdfs读写流程">1.hdfs读写流程</h6><p><a href="https://blog.csdn.net/qq_26803795/article/details/104823533">深入分析HDFS原理及读写流程</a></p><h6 id="2-小文件的危害">2.小文件的危害</h6><p>​(1)存储NameNode150B<code>128g*(1024m*1024kb*1024B) / 150B = 9.1亿</code></p><p>​(2)计算默认切片规则，每个文件单独切片。</p><h6 id="3-小文件怎么解决">3.小文件怎么解决</h6><p>​（1）har归档</p><p>​（2）CombineTextInputformat把所有文件放到一起统一切片</p><p>​（3）JVM重用</p><p>​（4）副本数 3个</p><p>​（5）块大小:取决于硬盘的读写数独</p><p>​</p><table><thead><tr><th style="text-align:center">1.x</th><th style="text-align:center">64m</th></tr></thead><tbody><tr><td style="text-align:center">2.x  3.x</td><td style="text-align:center">128m</td></tr><tr><td style="text-align:center">本地</td><td style="text-align:center">32m</td></tr><tr><td style="text-align:center">企业</td><td style="text-align:center">128m,256m,512m</td></tr></tbody></table><h4 id="MapReduce">MapReduce:</h4><p>MapReduce是一种编程模型，用于分布式处理大规模数据集。它将数据分为多个小块，并在Hadoop集群中的多个节点上并行处理这些数据。MapReduce由两个阶段组成：Map阶段和Reduce阶段。在Map阶段，数据被映射成键值对；在Reduce阶段，相同键的值被合并。</p><h6 id="shuffle-及其优化">shuffle 及其优化</h6><p>map方法之后，reduce方法之前混洗的过程叫做shuffle</p><h4 id="YARN">YARN:</h4><p>YARN是Hadoop的资源管理器，用于管理Hadoop集群中的计算资源。它可以为不同的应用程序分配不同的资源，从而提高资源利用率。</p><h6 id="1-yarn的工作机制">1.yarn的工作机制</h6><p><a href="https://blog.csdn.net/qq_40348184/article/details/123612797">yarn工作机制及其他知识点整理</a></p><h6 id="2-调度器">2.调度器</h6><ol><li><p>FIFO支持单队列、先进先出，生产环境不会用</p></li><li><p>容量调度器（并行度更低）</p><p>支持多队列优先保证先进入的任务执行</p></li><li><p>公平调度器（并行度高）</p><p>支持多队列每个任务公平享有队列资源资源不够时可以按照缺额分配</p></li></ol><p>​默认队列：default</p><p>​创建多队列：按照部门 业务线</p><h4 id="HBase-列示存储">HBase: 列示存储</h4><p>HBase是一个分布式的NoSQL数据库，用于存储结构化数据。它是基于HDFS构建的，并且可以实现数据的实时访问和查询。HBase主要用于大数据分析和实时数据处理。</p><p><em>针对的是<strong>文件内容</strong>的增删改</em></p><p>（ES:查询速度第一，数据写入慢）</p><h4 id="Hive">Hive:</h4><p>Hive是一个基于Hadoop的数据仓库系统，用于处理结构化数据。它支持SQL查询，并且可以将SQL语句转换为MapReduce作业来处理数据。</p><p>sqoop （数据库迁移的工具，非框架）</p><h4 id="Flume">Flume:</h4><p>Flume是一个分布式的日志收集和聚合系统，用于从不同的数据源收集和传输数据。它可以将数据发送到Hadoop集群中的不同组件进行处理。</p><h4 id="Kafka">Kafka:</h4><p>Kafka是一个分布式的消息队列系统，用于在不同的应用程序之间传输数据。它可以处理大量的数据，并且可以在不同的应用程序之间实现实时数据传输。</p><p>azkaban(轻量级)/oozie(重量级)：资源/计算调度</p><h4 id="zookeeper：选举机制">zookeeper：选举机制</h4><p>ZooKeeper是一个分布式协调服务，用于管理Hadoop集群中的多个节点之间的通信。它可以帮助Hadoop集群实现高可用性、可靠性和一致性。ZooKeeper主要用于实现分布式锁、配置管理、命名服务等功能。</p><p>HA高可用：解决单点故障问题 （zookeeper解决）</p><p>单点故障：一个分布式集群中，主节点只有一台</p><h3 id="spark生态：">spark生态：</h3><p>替代MapReduce引擎</p><p>Spark是一个快速的分布式计算框架，用于处理大规模数据集。它支持多种编程语言，并且可以在Hadoop集群上运行。Spark可以在内存中缓存数据，并且可以通过分布式内存计算来加速数据处理。</p><p>spark-core</p><p>spark-sql</p><p>spark-streaming: 准实时</p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>运维</title>
    <link href="/2023/03/20/%E8%BF%90%E7%BB%B4/"/>
    <url>/2023/03/20/%E8%BF%90%E7%BB%B4/</url>
    
    <content type="html"><![CDATA[<p>作为运维工程师，您需要掌握以下技能和技术路线：</p><ol><li>熟悉操作系统：运维工程师需要熟悉 Linux、Windows 等操作系统，包括系统安装、配置、优化、调试等。</li><li>熟悉网络技术：运维工程师需要熟悉 TCP/IP 协议、网络拓扑结构、路由器、交换机、防火墙等网络设备的配置和管理。</li><li>熟悉常用服务和应用：运维工程师需要熟悉常见的服务和应用，如 Web 服务器、数据库、缓存、消息队列等，能够进行安装、配置、优化、监控和故障排除。</li><li>熟悉自动化运维工具：运维工程师需要熟练掌握自动化运维工具，如 Ansible、SaltStack、Puppet 等，能够使用代码管理系统、自动化配置管理等技术提高工作效率。</li><li>熟悉监控和日志分析工具：运维工程师需要能够使用监控工具（如 Nagios、Zabbix、Prometheus 等）进行系统监控和报警，以及使用日志分析工具（如 ELK Stack、Splunk 等）进行日志分析和故障排除。</li><li>熟悉安全技术：运维工程师需要了解网络安全、数据安全等方面的知识，并能够进行安全策略的制定和实施，如访问控制、加密等。</li><li>具备编程和脚本能力：运维工程师需要掌握至少一门编程语言，如 Python、Perl、Shell 等，并能够编写脚本以简化重复性任务。</li><li>具备团队协作能力：运维工程师需要具备良好的团队协作能力，与开发人员、测试人员、产品经理等有效沟通，共同完成项目任务。</li></ol><p>DevOps</p><h2 id="Linux日常管理操作">Linux日常管理操作</h2><ol><li><p>用户管理：创建用户账号、修改密码、授权等。</p></li><li><p>文件系统管理：创建、删除、移动、复制文件和目录，查看磁盘空间等。</p></li><li><p>系统配置：设置网络配置、安装软件包、更新系统、设置系统服务等。</p></li><li><p>进程管理：查看、杀死进程、启动和停止服务等。</p></li><li><p>日志管理：查看和管理系统日志，包括系统日志、应用程序日志和安全日志等。</p></li><li><p>系统监控：查看系统性能、CPU、内存、网络等状态，以及监控服务状态和运行情况。</p></li><li><p>系统安全：设置防火墙、访问控制、SSH等安全相关配置，以及升级系统补丁、定期备份等操作。</p></li></ol><h4 id="用户和组管理">用户和组管理</h4><ul><li>添加用户：使用 useradd 命令添加新用户，例如：<code>sudo useradd username</code></li><li>删除用户：使用 userdel 命令删除用户，例如：<code>sudo userdel username</code></li><li>修改用户密码：使用 passwd 命令修改用户密码，例如：<code>sudo passwd username</code></li><li>创建组：使用 groupadd 命令创建新组，例如：<code>sudo groupadd groupname</code></li><li>添加用户到组：使用 usermod 命令将用户添加到组，例如：<code>sudo usermod -aG groupname username</code></li></ul><h4 id="文件和目录管理">文件和目录管理</h4><ul><li>创建目录：使用 mkdir 命令创建新目录，例如：<code>mkdir dirname</code></li><li>删除文件或目录：使用 rm 命令删除文件或目录，例如：<code>rm filename</code> 或 <code>rm -rf dirname</code></li><li>移动文件或目录：使用 mv 命令移动文件或目录，例如：<code>mv filename /path/to/new/location</code> 或 <code>mv dirname /path/to/new/location</code></li><li>复制文件或目录：使用 cp 命令复制文件或目录，例如：<code>cp filename /path/to/new/location</code> 或 <code>cp -r dirname /path/to/new/location</code></li><li>查看文件内容：使用 cat 命令查看文件内容，例如：<code>cat filename</code></li></ul><h4 id="系统服务管理">系统服务管理</h4><ul><li>启动服务：使用 systemctl 命令启动服务，例如：<code>sudo systemctl start servicename</code></li><li>停止服务：使用 systemctl 命令停止服务，例如：<code>sudo systemctl stop servicename</code></li><li>重启服务：使用 systemctl 命令重启服务，例如：<code>sudo systemctl restart servicename</code></li><li>查看服务状态：使用 systemctl 命令查看服务状态，例如：<code>sudo systemctl status servicename</code></li><li>设置服务开机自启：使用 systemctl 命令设置服务开机自启，例如：<code>sudo systemctl enable servicename</code></li></ul><h4 id="系统监测和性能优化">系统监测和性能优化</h4><ul><li>查看系统负载：使用 uptime 命令查看系统负载情况，例如：<code>uptime</code></li><li>查看系统内存使用情况：使用 free 命令查看系统内存使用情况，例如：<code>free -h</code></li><li>查看系统 CPU 使用情况：使用 top 命令查看系统 CPU 使用情况，例如：<code>top</code></li><li>查看磁盘使用情况：使用 df 命令查看磁盘使用情况，例如：<code>df -h</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>面试</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
